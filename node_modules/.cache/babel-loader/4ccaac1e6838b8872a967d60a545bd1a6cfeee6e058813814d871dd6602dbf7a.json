{"ast":null,"code":"import _objectSpread from\"C:/Users/Pertel/Desktop/my-ttavli-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,createContext,useContext,useCallback,useRef}from'react';import{initializeApp}from'firebase/app';import{getAuth,signInWithPopup,GoogleAuthProvider,onAuthStateChanged,signInAnonymously,signOut,signInWithCustomToken}from'firebase/auth';import{getFirestore,doc,getDoc,setDoc,updateDoc,collection,query,onSnapshot}from'firebase/firestore';// Tone.js imports removed as requested to resolve compilation issues.\n// import * as Tone from 'tone'; // Removed\n// Tailwind CSS is assumed to be available in the environment via a global CDN.\n// --- Firebase Configuration and Initialization ---\n// Retrieve Firebase configuration and app ID from the environment.\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const firebaseConfig=typeof __firebase_config!=='undefined'?JSON.parse(__firebase_config):{};const appId=typeof __app_id!=='undefined'?__app_id:'default-app-id';// Declare Firebase instances globally so they are initialized once.\nlet app;let db;let auth;try{// Initialize Firebase only if the configuration is provided.\nif(Object.keys(firebaseConfig).length>0){app=initializeApp(firebaseConfig);db=getFirestore(app);auth=getAuth(app);console.log(\"Firebase initialized successfully.\");}else{// Log a warning if Firebase config is missing, indicating demo mode.\nconsole.warn(\"Firebase config not found. Running in demo mode without persistence.\");}}catch(error){// Catch and log any errors during Firebase initialization.\n// Ignore \"already exists\" errors, which can occur during hot reloading.\nconsole.error(\"Firebase initialization error at global scope:\",error);if(!error.message.includes(\"already exists\")){console.error(\"Failed to initialize Firebase:\",error);}}// --- Auth Context for User Management ---\n// Create a React context to make authentication state and functions available throughout the app.\nconst AuthContext=/*#__PURE__*/createContext(null);const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);// Stores Firebase user object\nconst[userId,setUserId]=useState(null);// Stores the user's UID or a generated ID for anonymous users\nconst[loadingAuth,setLoadingAuth]=useState(true);// Indicates if authentication state is still being determined\nuseEffect(()=>{// If Firebase Auth is not initialized, stop loading and return.\nif(!auth){console.warn(\"Auth object is undefined, skipping auth listener setup.\");setLoadingAuth(false);return;}console.log(\"Setting up onAuthStateChanged listener...\");// Subscribe to Firebase authentication state changes.\nconst unsubscribe=onAuthStateChanged(auth,async user=>{console.log(\"onAuthStateChanged triggered. User:\",user?user.uid:'null');if(user){// If a user is logged in (or anonymously authenticated)\nsetCurrentUser(user);setUserId(user.uid);if(db){// Ensure Firestore is initialized before interacting with it.\nconst userRef=doc(db,'artifacts',appId,'users',user.uid);try{// Check if user profile exists in Firestore and create if not.\nconst userSnap=await getDoc(userRef);if(!userSnap.exists()){await setDoc(userRef,{displayName:user.displayName||'Anonymous User',email:user.email||'',photoURL:user.photoURL||'',createdAt:new Date(),totalGamesPlayed:0,totalMatchesWon:0,totalGamesWon:0,totalGamesLost:0,winLossRatio:0});console.log(\"New user profile created or existing updated.\");}}catch(firestoreError){console.error(\"Error accessing user document in Firestore:\",firestoreError);}}}else{// If no user is logged in, attempt anonymous sign-in or use custom token.\nsetCurrentUser(null);setUserId(null);console.log(\"User logged out or anonymous.\");if(auth&&typeof __initial_auth_token!=='undefined'){try{// Attempt to sign in with a provided custom token.\nawait signInWithCustomToken(auth,__initial_auth_token);console.log(\"Signed in with custom token.\");}catch(error){console.error(\"Error signing in with custom token:\",error);try{// Fallback to anonymous sign-in if custom token fails.\nawait signInAnonymously(auth);console.log(\"Signed in anonymously after custom token error.\");}catch(anonError){console.error(\"Error signing in anonymously:\",anonError);}}}else if(auth){try{// If no custom token, sign in anonymously.\nawait signInAnonymously(auth);console.log(\"Signed in anonymously.\");}catch(anonError){console.error(\"Error signing in anonymously:\",anonError);}}}setLoadingAuth(false);// Authentication loading is complete.\nconsole.log(\"Auth loading finished.\");});// Cleanup function for the effect: unsubscribe from auth state changes.\nreturn()=>{console.log(\"Cleaning up onAuthStateChanged listener.\");unsubscribe();};},[appId]);// Re-run effect only if appId changes.\n// Function to sign in with Google.\nconst signInWithGoogle=async()=>{if(!auth){console.error(\"Firebase Auth not initialized. Cannot sign in.\");return;}const provider=new GoogleAuthProvider();try{console.log(\"Attempting Google sign-in popup...\");await signInWithPopup(auth,provider);console.log(\"Google sign-in successful.\");}catch(error){console.error(\"Error signing in with Google:\",error);}};// Function to log out the current user.\nconst logout=async()=>{if(auth){try{console.log(\"Attempting to log out...\");await signOut(auth);console.log(\"User logged out successfully.\");}catch(error){console.error(\"Error signing out:\",error);}}};// Provide auth state and functions to children components.\nreturn/*#__PURE__*/_jsx(AuthContext.Provider,{value:{currentUser,userId,loadingAuth,signInWithGoogle,logout,db,appId},children:children});};// --- Firestore Service for Data Operations ---\n// Centralized service for interacting with Firestore.\nconst FirestoreService={// Saves a match result to a public collection in Firestore.\nsaveMatchResult:async matchData=>{if(!db){console.warn(\"Firestore not initialized. Cannot save match result.\");return;}try{const matchesCollectionRef=collection(db,'artifacts',appId,'public','data','matches');await setDoc(doc(matchesCollectionRef),_objectSpread(_objectSpread({},matchData),{},{timestamp:new Date()}));console.log(\"Match result saved successfully.\");}catch(error){console.error(\"Error saving match result:\",error);}},// Updates a user's statistics in their private Firestore document.\nupdateUserStats:async(userId,statsUpdate)=>{if(!db||!userId){console.warn(\"Firestore not initialized or userId missing. Cannot update user stats.\");return;}try{const userRef=doc(db,'artifacts',appId,'users',userId);await updateDoc(userRef,statsUpdate);console.log(\"User \".concat(userId,\" stats updated.\"));}catch(error){console.error(\"Error updating user stats:\",error);}},// Fetches all user profiles in real-time using a snapshot listener.\ngetUsers:callback=>{var _auth,_auth$currentUser;if(!db){console.warn(\"Firestore not initialized. Cannot get users.\");return()=>{};// Return a no-op unsubscribe function if db isn't ready.\n}console.log(\"Attempting to fetch users. Current Auth User ID:\",(_auth=auth)===null||_auth===void 0?void 0:(_auth$currentUser=_auth.currentUser)===null||_auth$currentUser===void 0?void 0:_auth$currentUser.uid);const usersCollectionRef=collection(db,'artifacts',appId,'users');const q=query(usersCollectionRef);// onSnapshot provides real-time updates.\nreturn onSnapshot(q,snapshot=>{const users=snapshot.docs.map(doc=>_objectSpread({id:doc.id},doc.data()));console.log(\"Users fetched:\",users.length,\"users.\");callback(users);},error=>{console.error(\"Error fetching users:\",error);});}};// --- Game Components ---\n// Dice Component: Displays dice values and a roll button with animation.\nconst Dice=_ref2=>{let{dice,setDice,rollDice,disabled}=_ref2;// Removed soundEnabled prop\nconst[isRolling,setIsRolling]=useState(false);// Tone.js sound refs removed.\n// const rollEventSynthRef = useRef(null);\n// const impactSynthRef = useRef(null);\nuseEffect(()=>{// Tone.js synth initialization and cleanup removed.\n// Cleanup function for the effect:\nreturn()=>{// if (rollEventSynthRef.current) {\n//   rollEventSynthRef.current.dispose();\n//   rollEventSynthRef.current = null;\n// }\n// if (impactSynthRef.current) {\n//   impactSynthRef.current.dispose();\n//   impactSynthRef.current = null;\n// }\n};},[]);// Tone.js sound playing function removed.\n// const playDiceRollSound = async (duration = 0.8) => { /* ... removed ... */ };\nconst handleRollDice=async()=>{if(disabled||isRolling)return;setIsRolling(true);// playDiceRollSound(0.8); // Call to sound function removed\n// Simulate rolling animation by rapidly changing dice numbers\nlet rollCount=0;const maxRolls=15;// Increased rolls for longer animation\nconst rollInterval=50;// Shorter interval for faster animation\nlet finalDie1,finalDie2;// Variables to store the final dice values\nconst animateRoll=setInterval(()=>{if(rollCount<maxRolls){setDice([Math.floor(Math.random()*6)+1,Math.floor(Math.random()*6)+1]);rollCount++;}else{clearInterval(animateRoll);setIsRolling(false);// Generate the final dice values after animation\nfinalDie1=Math.floor(Math.random()*6)+1;finalDie2=Math.floor(Math.random()*6)+1;setDice([finalDie1,finalDie2]);// Ensure the displayed dice match the final values\nrollDice(finalDie1,finalDie2);// Pass final values to the game logic\n}},rollInterval);};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center p-4 bg-gray-100 rounded-lg shadow-inner\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-gray-800 mb-3\",children:\"Dice\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRollDice,disabled:disabled||isRolling,className:\"px-6 py-2 rounded-full font-semibold shadow-md transition-all duration-200 \".concat(disabled||isRolling?'bg-gray-300 text-gray-600 cursor-not-allowed':'bg-blue-600 hover:bg-blue-700 text-white transform hover:scale-105'),children:isRolling?'Rolling...':'Roll Dice'})]});};// Backgammon Board Component: Renders the SVG-based backgammon board.\nconst BackgammonBoard=_ref3=>{let{board,currentPlayer,onPointClick,selectedPoint,possibleMovePoints,currentDiceValues}=_ref3;// Define constants for board dimensions and checker size.\nconst pointHeight=250;const checkerRadius=15;const boardWidth=720;const boardHeight=500;const barWidth=60;const bearOffAreaWidth=40;// Width of the new bear-off areas\n// Define mapping for each point on the board to its visual position.\nconst visualPointMapping=[// Top-left quadrant (points 13-18, visually from left to right)\n{gamePoint:13,isTop:true,indexInHalf:0,colorOffset:0},{gamePoint:14,isTop:true,indexInHalf:1,colorOffset:1},{gamePoint:15,isTop:true,indexInHalf:2,colorOffset:0},{gamePoint:16,isTop:true,indexInHalf:3,colorOffset:1},{gamePoint:17,isTop:true,indexInHalf:4,colorOffset:0},{gamePoint:18,isTop:true,indexInHalf:5,colorOffset:1},// Top-right quadrant (points 19-24, visually from left to right)\n{gamePoint:19,isTop:true,indexInHalf:6,colorOffset:0},{gamePoint:20,isTop:true,indexInHalf:7,colorOffset:1},{gamePoint:21,isTop:true,indexInHalf:8,colorOffset:0},{gamePoint:22,isTop:true,indexInHalf:9,colorOffset:1},{gamePoint:23,isTop:true,indexInHalf:10,colorOffset:0},{gamePoint:24,isTop:true,indexInHalf:11,colorOffset:1},// Bottom-left quadrant (points 12-7, visually from right to left)\n{gamePoint:12,isTop:false,indexInHalf:0,colorOffset:0},{gamePoint:11,isTop:false,indexInHalf:1,colorOffset:1},{gamePoint:10,isTop:false,indexInHalf:2,colorOffset:0},{gamePoint:9,isTop:false,indexInHalf:3,colorOffset:1},{gamePoint:8,isTop:false,indexInHalf:4,colorOffset:0},{gamePoint:7,isTop:false,indexInHalf:5,colorOffset:1},// Bottom-right quadrant (points 6-1, visually from right to left)\n{gamePoint:6,isTop:false,indexInHalf:6,colorOffset:0},{gamePoint:5,isTop:false,indexInHalf:7,colorOffset:1},{gamePoint:4,isTop:false,indexInHalf:8,colorOffset:0},{gamePoint:3,isTop:false,indexInHalf:9,colorOffset:1},{gamePoint:2,isTop:false,indexInHalf:10,colorOffset:0},{gamePoint:1,isTop:false,indexInHalf:11,colorOffset:1}];const halfBoardSectionWidth=boardWidth/2;const pointWidth=halfBoardSectionWidth/6;// Define board colors for SVG elements.\nconst boardBgColor='#654321';// Darker brown for main board\nconst pointColor1='#A0522D';// Sienna\nconst pointColor2='#D2B48C';// Tan (lighter brown)\n// Replaced solid colors with patterns for leather texture\nconst barFill=\"url(#darkLeatherTexture)\";const bearOffFill=\"url(#darkLeatherTexture)\";return/*#__PURE__*/_jsx(\"div\",{className:\"relative w-full aspect-[1.8/1] bg-brown-900 rounded-lg shadow-2xl overflow-hidden border-8 border-brown-950\",children:/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 \".concat(boardWidth+barWidth+bearOffAreaWidth*2,\" \").concat(boardHeight)// Adjust viewBox for new areas\n,className:\"w-full h-full\",preserveAspectRatio:\"xMidYMid meet\",children:[/*#__PURE__*/_jsxs(\"defs\",{children:[/*#__PURE__*/_jsxs(\"linearGradient\",{id:\"whiteMarbleGradient\",x1:\"0%\",y1:\"0%\",x2:\"100%\",y2:\"100%\",children:[/*#__PURE__*/_jsx(\"stop\",{offset:\"0%\",stopColor:\"#f0f0f0\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"50%\",stopColor:\"#ffffff\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"100%\",stopColor:\"#e0e0e0\"})]}),/*#__PURE__*/_jsxs(\"filter\",{id:\"whiteMarbleTexture\",x:\"0\",y:\"0\",width:\"100%\",height:\"100%\",children:[/*#__PURE__*/_jsx(\"feTurbulence\",{type:\"fractalNoise\",baseFrequency:\"0.05 0.1\",numOctaves:\"2\",result:\"noise\"}),/*#__PURE__*/_jsx(\"feDisplacementMap\",{in:\"SourceGraphic\",in2:\"noise\",scale:\"5\",xChannelSelector:\"R\",yChannelSelector:\"G\"}),/*#__PURE__*/_jsx(\"feComposite\",{operator:\"in\",in:\"SourceGraphic\",in2:\"noise\"}),\" \"]}),/*#__PURE__*/_jsxs(\"linearGradient\",{id:\"blackMarbleGradient\",x1:\"0%\",y1:\"0%\",x2:\"100%\",y2:\"100%\",children:[/*#__PURE__*/_jsx(\"stop\",{offset:\"0%\",stopColor:\"#202020\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"50%\",stopColor:\"#000000\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"100%\",stopColor:\"#303030\"})]}),/*#__PURE__*/_jsxs(\"filter\",{id:\"blackMarbleTexture\",x:\"0\",y:\"0\",width:\"100%\",height:\"100%\",children:[/*#__PURE__*/_jsx(\"feTurbulence\",{type:\"fractalNoise\",baseFrequency:\"0.05 0.1\",numOctaves:\"2\",result:\"noise\"}),/*#__PURE__*/_jsx(\"feDisplacementMap\",{in:\"SourceGraphic\",in2:\"noise\",scale:\"5\",xChannelSelector:\"R\",yChannelSelector:\"G\"}),/*#__PURE__*/_jsx(\"feComposite\",{operator:\"in\",in:\"SourceGraphic\",in2:\"noise\"})]}),/*#__PURE__*/_jsxs(\"pattern\",{id:\"darkLeatherTexture\",patternUnits:\"userSpaceOnUse\",width:\"20\",height:\"20\",children:[/*#__PURE__*/_jsx(\"rect\",{x:\"0\",y:\"0\",width:\"20\",height:\"20\",fill:\"#3A2A1A\"}),\" \",/*#__PURE__*/_jsx(\"circle\",{cx:\"5\",cy:\"5\",r:\"2\",fill:\"#4B3A2A\",opacity:\"0.5\"}),/*#__PURE__*/_jsx(\"circle\",{cx:\"15\",cy:\"15\",r:\"2\",fill:\"#4B3A2A\",opacity:\"0.5\"}),/*#__PURE__*/_jsx(\"rect\",{x:\"0\",y:\"10\",width:\"20\",height:\"1\",fill:\"#2B1A0A\",opacity:\"0.3\"})]})]}),/*#__PURE__*/_jsx(\"rect\",{x:bearOffAreaWidth,y:\"0\",width:boardWidth+barWidth,height:boardHeight,fill:boardBgColor}),/*#__PURE__*/_jsx(\"rect\",{x:\"0\",y:\"0\",width:bearOffAreaWidth,height:boardHeight,fill:bearOffFill,stroke:\"#3d2812\",strokeWidth:\"2\",onClick:()=>onPointClick(0)// Point 0 for white's bear-off area\n,className:possibleMovePoints.includes(0)&&currentPlayer==='white'?'stroke-lime-500 stroke-4 cursor-pointer':''}),/*#__PURE__*/_jsx(\"rect\",{x:boardWidth+barWidth+bearOffAreaWidth,y:\"0\",width:bearOffAreaWidth,height:boardHeight,fill:bearOffFill,stroke:\"#3d2812\",strokeWidth:\"2\",onClick:()=>onPointClick(25)// Point 25 for black's bear-off area\n,className:possibleMovePoints.includes(25)&&currentPlayer==='black'?'stroke-lime-500 stroke-4 cursor-pointer':''}),/*#__PURE__*/_jsx(\"rect\",{x:halfBoardSectionWidth+bearOffAreaWidth,y:\"0\",width:barWidth,height:boardHeight,fill:barFill,stroke:\"#3d2812\",strokeWidth:\"2\"}),visualPointMapping.map(pointData=>{const{gamePoint,isTop,indexInHalf}=pointData;const fillColor=indexInHalf%2===0?pointColor1:pointColor2;// Alternate point colors.\nlet currentPointX;// Calculate X position based on which half of the board the point is in.\nif(indexInHalf<6){// First half of either top or bottom row.\ncurrentPointX=pointWidth*indexInHalf+bearOffAreaWidth;// Shift by bear-off area width\n}else{// Second half, after the bar.\ncurrentPointX=pointWidth*indexInHalf+barWidth+bearOffAreaWidth;// Shift by bar and bear-off area width\n}// Define triangle points for top or bottom row.\nconst trianglePoints=isTop?\"\".concat(currentPointX,\",0 \").concat(currentPointX+pointWidth/2,\",\").concat(pointHeight,\" \").concat(currentPointX+pointWidth,\",0\"):\"\".concat(currentPointX,\",\").concat(boardHeight,\" \").concat(currentPointX+pointWidth/2,\",\").concat(boardHeight-pointHeight,\" \").concat(currentPointX+pointWidth,\",\").concat(boardHeight);const isSelected=selectedPoint===gamePoint;const isPossibleMove=possibleMovePoints.includes(gamePoint);return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"polygon\",{points:trianglePoints,fill:fillColor,stroke:isPossibleMove?'lime':isSelected?'yellow':'#333'// Highlight selected/possible moves.\n,strokeWidth:isPossibleMove||isSelected?'4':'1',className:\"hover:opacity-80 transition-opacity cursor-pointer\",onClick:()=>onPointClick(gamePoint)// Make the point itself clickable\n}),isPossibleMove&&gamePoint!==0&&/*#__PURE__*/// Don't show arrow for bear-off (point 0)\n_jsx(\"polygon\",{points:isTop?\"\".concat(currentPointX+pointWidth/2-8,\",\",28,\" \").concat(currentPointX+pointWidth/2+8,\",\",28,\" \").concat(currentPointX+pointWidth/2,\",\",12)// Upward arrow (towards top edge)\n:\"\".concat(currentPointX+pointWidth/2-8,\",\").concat(boardHeight-28,\" \").concat(currentPointX+pointWidth/2+8,\",\").concat(boardHeight-28,\" \").concat(currentPointX+pointWidth/2,\",\").concat(boardHeight-12)// Downward arrow (towards bottom edge)\n,fill:\"black\",stroke:\"white\"// Small white border for visibility\n,strokeWidth:\"1\",opacity:\"0.8\"}),board.points[gamePoint-1].checkers.map((color,checkerIdx)=>{let checkerY;const checkerCountOnPoint=board.points[gamePoint-1].checkers.length;// Calculate Y position for checkers, stacking them.\nif(isTop){checkerY=checkerIdx*checkerRadius*2+checkerRadius;}else{checkerY=boardHeight-checkerRadius-checkerIdx*checkerRadius*2;}// Limit visible checkers to 5 and show count for more.\nif(checkerIdx>=5){if(checkerIdx===5){return/*#__PURE__*/_jsxs(\"text\",{x:currentPointX+pointWidth/2,y:isTop?checkerRadius*2*5+checkerRadius+10:boardHeight-checkerRadius*2*5-checkerRadius-10,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:\"white\",fontSize:\"18\",fontWeight:\"bold\",children:[\"x\",checkerCountOnPoint]},\"count-\".concat(gamePoint));}return null;}// Add highlighting for the current player's checkers\nconst isCurrentPlayerChecker=color===currentPlayer;// Highlight color and width: black for white player, white for black player, yellow if selected\nconst checkerStrokeColor=isCurrentPlayerChecker?isSelected?'yellow':currentPlayer==='white'?'black':'white':'#555';const checkerStrokeWidth=isCurrentPlayerChecker?isSelected?'3':'3':'1';// Thicker border for current player\nconst checkerFill=color==='white'?'url(#whiteMarbleGradient)':'url(#blackMarbleGradient)';const checkerFilter=color==='white'?'url(#whiteMarbleTexture)':'url(#blackMarbleTexture)';return/*#__PURE__*/_jsx(\"circle\",{cx:currentPointX+pointWidth/2,cy:checkerY,r:checkerRadius,fill:checkerFill// Use the gradient for fill\n,filter:checkerFilter// Apply the filter for texture\n,stroke:checkerStrokeColor,strokeWidth:checkerStrokeWidth,className:\"cursor-pointer\"// Make checkers look clickable\n,onClick:e=>{e.stopPropagation();// Prevent clicking through to the point if checker is clicked\nonPointClick(gamePoint);}},\"\".concat(gamePoint,\"-\").concat(checkerIdx));})]},gamePoint);}),board.bar.white>0&&/*#__PURE__*/_jsxs(\"g\",{children:[Array(Math.min(board.bar.white,5)).fill(0).map((_,idx)=>/*#__PURE__*/_jsx(\"circle\",{cx:halfBoardSectionWidth+barWidth/2+bearOffAreaWidth// Shifted by bear-off area width\n,cy:boardHeight/2-checkerRadius-idx*checkerRadius*2,r:checkerRadius,fill:\"url(#whiteMarbleGradient)\"// Use the gradient\n,filter:\"url(#whiteMarbleTexture)\"// Apply the filter\n,stroke:currentPlayer==='white'?'black':'#555'// Highlight if white's turn with black border\n,strokeWidth:currentPlayer==='white'?'3':'1'// Thicker for current player\n},\"bar-white-\".concat(idx))),board.bar.white>5&&/*#__PURE__*/_jsxs(\"text\",{x:halfBoardSectionWidth+barWidth/2+bearOffAreaWidth,y:boardHeight/2-checkerRadius-checkerRadius*2*5-10,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:\"white\",fontSize:\"18\",fontWeight:\"bold\",children:[\"x\",board.bar.white]})]}),board.bar.black>0&&/*#__PURE__*/_jsxs(\"g\",{children:[Array(Math.min(board.bar.black,5)).fill(0).map((_,idx)=>/*#__PURE__*/_jsx(\"circle\",{cx:halfBoardSectionWidth+barWidth/2+bearOffAreaWidth// Shifted by bear-off area width\n,cy:boardHeight/2+checkerRadius+idx*checkerRadius*2,r:checkerRadius,fill:\"url(#blackMarbleGradient)\"// Use the gradient\n,filter:\"url(#blackMarbleTexture)\"// Apply the filter\n,stroke:currentPlayer==='black'?'white':'#555'// Highlight if black's turn with white border\n,strokeWidth:currentPlayer==='black'?'3':'1'// Thicker for current player\n},\"bar-black-\".concat(idx))),board.bar.black>5&&/*#__PURE__*/_jsxs(\"text\",{x:halfBoardSectionWidth+barWidth/2+bearOffAreaWidth,y:boardHeight/2+checkerRadius+checkerRadius*2*5+10,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:\"black\",fontSize:\"18\",fontWeight:\"bold\",children:[\"x\",board.bar.black]})]}),board.home.white>0&&/*#__PURE__*/_jsx(\"g\",{children:Array(board.home.white).fill(0).map((_,idx)=>/*#__PURE__*/_jsx(\"circle\",{cx:bearOffAreaWidth/2,cy:boardHeight-checkerRadius-idx*checkerRadius*2-5// Stack from bottom up\n,r:checkerRadius,fill:\"url(#whiteMarbleGradient)\",filter:\"url(#whiteMarbleTexture)\",stroke:\"#555\",strokeWidth:\"1\"},\"home-white-\".concat(idx)))}),board.home.black>0&&/*#__PURE__*/_jsx(\"g\",{children:Array(board.home.black).fill(0).map((_,idx)=>/*#__PURE__*/_jsx(\"circle\",{cx:boardWidth+barWidth+bearOffAreaWidth+bearOffAreaWidth/2,cy:checkerRadius+idx*checkerRadius*2+5// Stack from top down\n,r:checkerRadius,fill:\"url(#blackMarbleGradient)\",filter:\"url(#blackMarbleTexture)\",stroke:\"#555\",strokeWidth:\"1\"},\"home-black-\".concat(idx)))}),/*#__PURE__*/_jsx(\"text\",{x:boardWidth/2+barWidth/2+bearOffAreaWidth// Center horizontally, accounting for bear-off area\n,y:boardHeight/2-55// Shifted further up to make more space for dice\n,textAnchor:\"middle\",dominantBaseline:\"middle\"// Ensures true vertical centering\n,fill:currentPlayer==='white'?'white':'black',stroke:currentPlayer==='white'?'black':'white'// Added outline\n,strokeWidth:\"1.5\"// Outline thickness\n,fontSize:\"24\",fontWeight:\"bold\",className:\"transition-all duration-500\",children:currentPlayer==='white'?'White\\'s Turn':'Black\\'s Turn'}),/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"rect\",{x:halfBoardSectionWidth+bearOffAreaWidth+barWidth/2-45// Position left die, centered with 10px gap\n,y:boardHeight/2+5,width:\"40\",height:\"40\",fill:\"white\",stroke:\"#333\",strokeWidth:\"1\",rx:\"5\",ry:\"5\"// Rounded corners\n}),/*#__PURE__*/_jsx(\"text\",{x:halfBoardSectionWidth+bearOffAreaWidth+barWidth/2-25// Text for left die\n,y:boardHeight/2+30,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:\"black\",fontSize:\"24\",fontWeight:\"bold\",children:currentDiceValues[0]||'?'}),/*#__PURE__*/_jsx(\"rect\",{x:halfBoardSectionWidth+bearOffAreaWidth+barWidth/2+5// Position right die, centered with 10px gap\n,y:boardHeight/2+5,width:\"40\",height:\"40\",fill:\"white\",stroke:\"#333\",strokeWidth:\"1\",rx:\"5\",ry:\"5\"// Rounded corners\n}),/*#__PURE__*/_jsx(\"text\",{x:halfBoardSectionWidth+bearOffAreaWidth+barWidth/2+25// Text for right die\n,y:boardHeight/2+30,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:\"black\",fontSize:\"24\",fontWeight:\"bold\",children:currentDiceValues[1]||'?'})]}),/*#__PURE__*/_jsx(\"g\",{className:\"point-numbers-overlay\",children:visualPointMapping.map(pointData=>{const{gamePoint,isTop,indexInHalf}=pointData;let currentPointX;if(indexInHalf<6){currentPointX=pointWidth*indexInHalf+bearOffAreaWidth;}else{currentPointX=pointWidth*indexInHalf+barWidth+bearOffAreaWidth;}return/*#__PURE__*/_jsx(\"text\",{x:currentPointX+pointWidth/2,y:isTop?pointHeight+25:boardHeight-pointHeight-15,textAnchor:\"middle\",dominantBaseline:isTop?\"hanging\":\"ideographic\",fill:\"white\",stroke:\"black\",strokeWidth:\"1\",fontSize:\"18\",fontWeight:\"bold\",children:gamePoint},\"num-\".concat(gamePoint));})})]})});};// Custom Confirmation Modal Component: Replaces native window.confirm.\nconst ConfirmModal=_ref4=>{let{message,onConfirm,onCancel}=_ref4;return/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-lg p-8 shadow-2xl text-center max-w-sm w-full border-t-8 border-blue-600\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-gray-800 mb-4\",children:\"Confirmation\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-700 mb-6\",children:message}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center gap-4\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:onConfirm,className:\"bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full shadow-md transition-all duration-300 transform hover:scale-105\",children:\"Yes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onCancel,className:\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-6 rounded-full shadow-md transition-all duration-300 transform hover:scale-105\",children:\"No\"})]})]})});};// --- Main Game Logic Component (BackgammonGame) ---\nconst BackgammonGame=_ref5=>{let{onMatchEnd}=_ref5;const{currentUser,userId}=useContext(AuthContext);const[matchFormat,setMatchFormat]=useState(7);// Number of games in a match (e.g., best of 7)\nconst[playerScore,setPlayerScore]=useState(0);// Current player's score in the match\nconst[opponentScore,setOpponentScore]=useState(0);// Opponent's score in the match\nconst[gameMessage,setGameMessage]=useState(\"Click 'Start Match' to begin!\");// Messages for user guidance\nconst[isPlaying,setIsPlaying]=useState(false);// Game active state\nconst[showModal,setShowModal]=useState(false);// State for general info modal (e.g., match end)\nconst[modalMessage,setModalMessage]=useState('');// Message for the general info modal\nconst[showConfirmModal,setShowConfirmModal]=useState(false);// State for custom confirmation modal\nconst[confirmModalAction,setConfirmModalAction]=useState(null);// Action to run if confirmation is given\nconst[dice,setDice]=useState([0,0]);// Current dice roll values\nconst[availableDice,setAvailableDice]=useState([]);// Dice values that can still be used for moves\nconst[currentPlayer,setCurrentPlayer]=useState('white');// 'white' or 'black' player turn\nconst[selectedPoint,setSelectedPoint]=useState(null);// The board point (1-24) from which a checker is selected\n// Change possibleMovePoints to store objects with targetPoint and diceUsed\nconst[possibleMovesInfo,setPossibleMovesInfo]=useState([]);// Array of { targetPoint, diceUsed[] }\nconst[mustReenterFromBar,setMustReenterFromBar]=useState(false);// Flag if player has checkers on the bar\n// const [soundEnabled, setSoundEnabled] = useState(true); // Sound enabled state removed\nconst[moveHistory,setMoveHistory]=useState([]);// Stores history of individual checker moves\n// Define the custom paths for movement as per user's description\nconst whitePath=[12,11,10,9,8,7,6,5,4,3,2,1,24,23,22,21,20,19,18,17,16,15,14,13];const blackPath=[13,14,15,16,17,18,19,20,21,22,23,24,1,2,3,4,5,6,7,8,9,10,11,12];// Board State: Represents the checkers on each point, bar, and home areas.\nconst[boardState,setBoardState]=useState({points:Array(24).fill(null).map(()=>({checkers:[]})),bar:{white:0,black:0},home:{white:0,black:0}});// Initializes the board to the standard starting positions.\nconst initializeBoard=useCallback(()=>{const newPoints=Array(24).fill(null).map(()=>({checkers:[]}));// White player's initial positions as per user's latest precise description\nnewPoints[11].checkers=Array(2).fill('white');// Point 12 (index 11)\nnewPoints[19].checkers=Array(3).fill('white');// Point 20 (index 19)\nnewPoints[0].checkers=Array(5).fill('white');// Point 1 (index 0)\nnewPoints[17].checkers=Array(5).fill('white');// Point 18 (index 17)\n// Black player's initial positions as per user's latest precise description\nnewPoints[6].checkers=Array(5).fill('black');// Point 7 (index 6)\nnewPoints[4].checkers=Array(3).fill('black');// Point 5 (index 4)\nnewPoints[23].checkers=Array(5).fill('black');// Point 24 (index 23)\nnewPoints[12].checkers=Array(2).fill('black');// Point 13 (index 12)\nsetBoardState({points:newPoints,bar:{white:0,black:0},home:{white:0,black:0}});},[]);// Helper to determine the opponent's color.\nconst getOpponentColor=useCallback(playerColor=>playerColor==='white'?'black':'opponent',[]);// Determines if a point is blocked by the opponent (2 or more opponent checkers).\nconst isPointBlocked=useCallback(function(pointIndex,playerColor){let currentBoardState=arguments.length>2&&arguments[2]!==undefined?arguments[2]:boardState;const point=currentBoardState.points[pointIndex];if(!point||point.checkers.length===0)return false;// Point is empty or no checkers.\nconst opponentColor=getOpponentColor(playerColor);return point.checkers[0]===opponentColor&&point.checkers.length>=2;},[getOpponentColor,boardState]);// Checks if all of a player's checkers are in their home board.\nconst areAllCheckersInHomeBoard=useCallback(function(playerColor){let currentBoardState=arguments.length>1&&arguments[1]!==undefined?arguments[1]:boardState;const totalCheckers=15;let checkersBorneOff=currentBoardState.home[playerColor];let checkersInHomeQuadrantOnBoard=0;const isWhite=playerColor==='white';// The home points are the last 6 points in their respective paths\n// For white, these are [6, 5, 4, 3, 2, 1]\n// For black, these are [19, 20, 21, 22, 23, 24]\nconst homePointsForBearingOff=isWhite?[6,5,4,3,2,1]:[19,20,21,22,23,24];// If checkers are on the bar, they are not yet in the home board, so bearing off is not possible.\nif(currentBoardState.bar[playerColor]>0){return false;}// Iterate through all 24 board points\nfor(let i=0;i<24;i++){const gamePoint=i+1;const checkersOnCurrentPoint=currentBoardState.points[i].checkers.filter(c=>c===playerColor).length;if(checkersOnCurrentPoint>0){// If any checker of the current player is on a point *not* in their home bearing-off region,\n// then not all checkers are in the home board.\nif(!homePointsForBearingOff.includes(gamePoint)){return false;}else{checkersInHomeQuadrantOnBoard+=checkersOnCurrentPoint;}}}// All checkers are considered \"home\" if total checkers (borne off + on home board points) equals 15.\nreturn checkersBorneOff+checkersInHomeQuadrantOnBoard===totalCheckers;},[boardState]);// Removed whitePath, blackPath from here as homePointsForBearingOff is hardcoded\n// Helper function to check if any moves are possible with given state and dice\nconst checkIfAnyPossibleMoves=useCallback((currentBoardState,player,currentDice)=>{const isWhite=player==='white';const playerPath=isWhite?whitePath:blackPath;// Accessing whitePath, blackPath from outer scope\n// Check for bar re-entry moves first\nif(currentBoardState.bar[player]>0){for(const die of currentDice){let targetGamePoint;if(isWhite){targetGamePoint=die;// White re-enters on points 1-6\n}else{targetGamePoint=18+die;// Black re-enters on points 19-24\n}const targetPointIndex=targetGamePoint-1;if(targetPointIndex>=0&&targetPointIndex<24&&!isPointBlocked(targetPointIndex,player,currentBoardState)){return true;// Found a possible bar re-entry move\n}}return false;// No possible bar re-entry moves\n}// If no checkers on bar, check for moves from the board\nfor(let i=0;i<24;i++){const currentPointCheckers=currentBoardState.points[i].checkers;if(currentPointCheckers.length>0&&currentPointCheckers[0]===player){const fromPoint=i+1;const fromPointIndexInPath=playerPath.indexOf(fromPoint);if(fromPointIndexInPath===-1){continue;// This checker is not on the player's active path (shouldn't happen with correct setup)\n}for(const die of currentDice){let targetPathIndex=fromPointIndexInPath+die;if(targetPathIndex>=playerPath.length){// Potential bearing off\nif(areAllCheckersInHomeBoard(player,currentBoardState)){let noCheckersEarlierInPath=true;// Check if any checkers are on a point further away than 'fromPoint' in the bearing off quadrant\nconst homePoints=isWhite?[6,5,4,3,2,1]:[19,20,21,22,23,24];const fromPointHomeIndex=homePoints.indexOf(fromPoint);// Index within home points (0-5)\nif(fromPointHomeIndex!==-1){// Only check if current checker is in home board\nfor(let k=0;k<fromPointHomeIndex;k++){// Check points \"closer\" to bearing off\nconst furtherPointOnBoard=homePoints[k];// These are points with higher value for white, lower for black\nif(currentBoardState.points[furtherPointOnBoard-1].checkers.includes(player)){noCheckersEarlierInPath=false;// Found a checker further away (i.e. \"earlier\" in path)\nbreak;}}}else{noCheckersEarlierInPath=false;// Checker is not even in home board, so can't bear off\n}// Special rule: if die is exact match for point OR die is larger than any point in home board\n// AND all other checkers are on points closer to bear-off\nconst dieCanOvershoot=die>=(isWhite?fromPoint:25-fromPoint);if(noCheckersEarlierInPath){// If die exactly matches the point, or it overshoots and this is the highest point\nif(isWhite&&fromPoint===die||!isWhite&&25-fromPoint===die){return true;// Exact bear off\n}// Overshoot rule: if die is larger than current point AND this is the furthest checker\nif(dieCanOvershoot){let isFurthestChecker=true;for(let k=0;k<24;k++){if(currentBoardState.points[k].checkers.includes(player)){if(isWhite&&k+1>fromPoint){// White: if a checker is on a point higher than 'fromPoint'\nisFurthestChecker=false;break;}if(!isWhite&&k+1<fromPoint){// Black: if a checker is on a point lower than 'fromPoint'\nisFurthestChecker=false;break;}}}if(isFurthestChecker){return true;// Overshoot bear off\n}}}}}else{// Regular move on board\nconst targetGamePoint=playerPath[targetPathIndex];if(targetGamePoint>=1&&targetGamePoint<=24){if(!isPointBlocked(targetGamePoint-1,player,currentBoardState)){return true;// Found a possible regular move\n}}}}}}return false;// No possible moves found\n},[isPointBlocked,areAllCheckersInHomeBoard,whitePath,blackPath]);// Added dependencies\n// Calculates all possible moves for a checker from a given `fromPoint` with `currentDice`.\n// Returns an array of objects: { targetPoint: number, diceUsed: number[] }\nconst calculatePossibleMoves=useCallback((fromPoint,currentDice,playerColor,board)=>{const moves=[];// Will store objects: { targetPoint, diceUsed[] }\nconst isWhite=playerColor==='white';const playerPath=isWhite?whitePath:blackPath;// Helper for single step move validation and target determination\nconst checkSingleStepLogic=function(startPoint,startPathIndex,die,tempBoard,playerColor){let isInitialFromBar=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let targetGamePoint=null;// Default to null for invalid/no move\nlet isValid=false;let isBearingOff=false;// If moving from bar, target calculation is direct based on die roll\nif(isInitialFromBar&&startPoint==='bar'){if(isWhite){targetGamePoint=die;// White re-enters on points 1-6\n}else{targetGamePoint=18+die;// Black re-enters on points 19-24\n}const targetPointIndex=targetGamePoint-1;if(targetPointIndex>=0&&targetPointIndex<24&&!isPointBlocked(targetPointIndex,playerColor,tempBoard)){isValid=true;}return{targetGamePoint,isValid,isBearingOff:false};}// If moving from board point\nconst targetPathIndex=startPathIndex+die;if(targetPathIndex>=playerPath.length){// Potential bearing off\nisBearingOff=true;if(areAllCheckersInHomeBoard(playerColor,tempBoard)){// Check overshoot rule: no checkers should be on points further away from the bear-off area\nlet noCheckersFurtherAway=true;const homePoints=isWhite?[6,5,4,3,2,1]:[19,20,21,22,23,24];const fromPointHomeIndex=homePoints.indexOf(startPoint);if(fromPointHomeIndex!==-1){for(let i=0;i<fromPointHomeIndex;i++){// Check points \"further\" in the path (closer to start of home board)\nconst furtherPoint=homePoints[i];if(tempBoard.points[furtherPoint-1].checkers.includes(playerColor)){noCheckersFurtherAway=false;break;}}}else{// Checker is not in the home board at all, so cannot bear off\nnoCheckersFurtherAway=false;}if(noCheckersFurtherAway){// If die matches the point exactly or is greater than the distance to bear off (overshoot)\nconst distanceToBearOff=isWhite?startPoint:25-startPoint;// How many pips needed to bear off this checker\nif(die===distanceToBearOff||die>distanceToBearOff&&noCheckersFurtherAway){targetGamePoint=isWhite?0:25;// Special value for white/black bear-off\nisValid=true;}}}}else{// Regular move on board\nconst actualTargetGamePoint=playerPath[targetPathIndex];if(actualTargetGamePoint>=1&&actualTargetGamePoint<=24){if(!isPointBlocked(actualTargetGamePoint-1,playerColor,tempBoard)){targetGamePoint=actualTargetGamePoint;isValid=true;}}}return{targetGamePoint,isValid,isBearingOff};};// 1. Bar re-entry moves (if applicable)\nif(mustReenterFromBar&&fromPoint==='bar'){currentDice.forEach(die=>{const{targetGamePoint,isValid}=checkSingleStepLogic('bar',-1,die,board,playerColor,true);// -1 for path index as it's from bar\nif(isValid){moves.push({targetPoint:targetGamePoint,diceUsed:[die]});}});// After considering bar re-entry, no other moves are possible from the board\n// So, if we are in mustReenterFromBar state and selected point is 'bar', return these moves.\nreturn moves;}// If not from bar, ensure fromPoint is a valid board point and has current player's checker\nif(fromPoint==='bar'||!board.points[fromPoint-1]||board.points[fromPoint-1].checkers[0]!==playerColor){return[];// Invalid starting point for a board move\n}const fromPointIndexInPath=playerPath.indexOf(fromPoint);if(fromPointIndexInPath===-1){return[];// Should not happen for a valid checker on the board\n}// Recursive helper to find all possible move combinations\nconst findAllMoves=(currentFromPoint,currentFromPathIndex,remainingDice,currentBoard,pathDice)=>{if(remainingDice.length===0){return;// No more dice to use\n}const uniqueDiceConsidered=new Set();// Sort remaining dice to ensure consistent ordering for unique path generation\nconst sortedRemainingDice=[...remainingDice].sort((a,b)=>a-b);sortedRemainingDice.forEach((d1,originalIdx)=>{// Create a temporary array to simulate removing this specific die instance\nconst tempRemainingDice=[...sortedRemainingDice];const actualIdx=tempRemainingDice.indexOf(d1);// Find index of the first occurrence of this die\nif(actualIdx>-1){tempRemainingDice.splice(actualIdx,1);}else{return;// Should not happen\n}const tempBoardAfterD1=JSON.parse(JSON.stringify(currentBoard));let checkerSuccessfullyMovedInTemp=true;// Hypothetically remove checker from source point for the first step\nif(currentFromPoint==='bar'){if(tempBoardAfterD1.bar[playerColor]===0){checkerSuccessfullyMovedInTemp=false;}else{tempBoardAfterD1.bar[playerColor]--;}}else{if(!tempBoardAfterD1.points[currentFromPoint-1]||tempBoardAfterD1.points[currentFromPoint-1].checkers.length===0||tempBoardAfterD1.points[currentFromPoint-1].checkers[0]!==playerColor){checkerSuccessfullyMovedInTemp=false;}else{tempBoardAfterD1.points[currentFromPoint-1].checkers.pop();}}if(!checkerSuccessfullyMovedInTemp)return;const{targetGamePoint:intermediatePoint,isValid:isValidIntermediate,isBearingOff:isIntermedBearOff}=checkSingleStepLogic(currentFromPoint,currentFromPathIndex,d1,tempBoardAfterD1,playerColor);if(isValidIntermediate){if(!isIntermedBearOff){// If not bearing off in intermediate step\nif(tempBoardAfterD1.points[intermediatePoint-1].checkers.length===1&&tempBoardAfterD1.points[intermediatePoint-1].checkers[0]===getOpponentColor(playerColor)){tempBoardAfterD1.points[intermediatePoint-1].checkers.pop();tempBoardAfterD1.bar[getOpponentColor(playerColor)]++;}// Check for block *after* hitting blot (if it's not a blot, it's just a regular move onto an empty or friendly point)\nif(isPointBlocked(intermediatePoint-1,playerColor,tempBoardAfterD1)){return;// This intermediate point is blocked, so this path is invalid.\n}tempBoardAfterD1.points[intermediatePoint-1].checkers.push(playerColor);}const currentPathDice=[...pathDice,d1];moves.push({targetPoint:intermediatePoint,diceUsed:currentPathDice.sort((a,b)=>a-b)});// Recurse with remaining dice from the intermediate point\nconst intermediatePointPathIndex=isIntermedBearOff?playerPath.length:playerPath.indexOf(intermediatePoint);if(intermediatePointPathIndex!==-1&&tempRemainingDice.length>0){findAllMoves(intermediatePoint,intermediatePointPathIndex,tempRemainingDice,tempBoardAfterD1,currentPathDice);}}});};findAllMoves(fromPoint,fromPointIndexInPath,currentDice,board,[]);// Filter for unique target points and prioritize paths with fewer dice or higher sum\nconst uniqueMovesMap=new Map();// targetPoint -> { targetPoint, diceUsed }\nmoves.forEach(move=>{const key=move.targetPoint;// Using target point as the unique key\n// Create a canonical representation of diceUsed for comparison (sorted string)\nconst currentDiceUsedStr=move.diceUsed.sort((a,b)=>a-b).join(',');if(!uniqueMovesMap.has(key)){uniqueMovesMap.set(key,move);}else{const existingMove=uniqueMovesMap.get(key);const existingDiceUsedStr=existingMove.diceUsed.sort((a,b)=>a-b).join(',');// If the dice used are different for the same target, add it as a separate option\nif(currentDiceUsedStr!==existingDiceUsedStr){// This scenario means we might have two paths to the same point with different dice combos.\n// For now, we'll keep the one that was added first, or apply a specific priority.\n// Current implementation prioritizes earlier found moves if key exists,\n// or if it's strictly better (fewer dice or higher sum for same # dice).\nif(move.diceUsed.length<existingMove.diceUsed.length){uniqueMovesMap.set(key,move);}else if(move.diceUsed.length===existingMove.diceUsed.length){const sumCurrent=move.diceUsed.reduce((sum,d)=>sum+d,0);const sumExisting=existingMove.diceUsed.reduce((sum,d)=>sum+d,0);if(sumCurrent>sumExisting){uniqueMovesMap.set(key,move);}}}// If diceUsed is the same, no need to add duplicate.\n}});return Array.from(uniqueMovesMap.values());// Return objects with target and dice used.\n},[mustReenterFromBar,areAllCheckersInHomeBoard,isPointBlocked,whitePath,blackPath,getOpponentColor]);// Ends the entire match and updates user statistics in Firebase.\nconst endMatch=useCallback(playerWon=>{setIsPlaying(false);const winnerGames=playerWon?playerScore:opponentScore;const loserGames=playerWon?opponentScore:playerScore;setModalMessage(\"Match Over! You \".concat(playerWon?'won':'lost',\" the best of \").concat(matchFormat,\" match (\").concat(winnerGames,\"-\").concat(loserGames,\").\"));setShowModal(true);if(currentUser&&!currentUser.isAnonymous){// Prepare match result data for saving.\nconst matchResult={player1Id:userId,player1DisplayName:currentUser.displayName||'You',player2Id:'AI_Opponent',// Assuming single-player vs AI.\nplayer2DisplayName:'AI Opponent',winnerId:playerWon?userId:'AI_Opponent',loserId:playerWon?'AI_Opponent':userId,matchFormat:matchFormat,player1GamesWon:playerScore,player2GamesWon:opponentScore};FirestoreService.saveMatchResult(matchResult);// Save match to Firestore.\n// Prepare user statistics update.\nconst userStatsUpdate={totalGamesPlayed:(currentUser.totalGamesPlayed||0)+1,// Count matches as \"games played\" for overall stats.\ntotalMatchesWon:(currentUser.totalMatchesWon||0)+(playerWon?1:0),totalMatchesLost:(currentUser.totalMatchesLost||0)+(playerWon?0:1),totalGamesWon:(currentUser.totalGamesWon||0)+playerScore,// Total games won across all matches.\ntotalGamesLost:(currentUser.totalGamesLost||0)+opponentScore// Total games lost across all matches.\n};const newTotalMatches=userStatsUpdate.totalMatchesWon+userStatsUpdate.totalMatchesLost;userStatsUpdate.winLossRatio=newTotalMatches>0?(userStatsUpdate.totalMatchesWon/newTotalMatches).toFixed(3):0;FirestoreService.updateUserStats(userId,userStatsUpdate);// Update user stats in Firestore.\n}onMatchEnd();// Callback to parent component (App) to navigate to stats page.\n},[currentUser,matchFormat,opponentScore,playerScore,userId,onMatchEnd]);// Ends the current player's turn, checking for game win and switching players.\nconst endTurn=useCallback(()=>{if(!isPlaying)return;// Check for current game winner (15 checkers borne off).\nif(boardState.home.white===15){setModalMessage(\"White wins this game!\");setShowModal(true);setPlayerScore(prev=>prev+1);// Increment match score.\ninitializeBoard();// Reset board for next game.\nsetDice([0,0]);setAvailableDice([]);setSelectedPoint(null);setPossibleMovesInfo([]);// Clear possible moves info\nsetMustReenterFromBar(false);setCurrentPlayer('white');// White always starts the next game.\nsetGameMessage(\"New game started. White to roll.\");setMoveHistory([]);// Clear history for new game/turn\nreturn;}else if(boardState.home.black===15){setModalMessage(\"Black wins this game!\");setShowModal(true);setOpponentScore(prev=>prev+1);initializeBoard();setDice([0,0]);setAvailableDice([]);setSelectedPoint(null);setPossibleMovesInfo([]);// Clear possible moves info\nsetMustReenterFromBar(false);setCurrentPlayer('black');// Black starts the next game.\nsetGameMessage(\"New game started. Black to roll.\");setMoveHistory([]);// Clear history for new game/turn\nreturn;}// If no game winner, switch to the other player's turn.\nsetCurrentPlayer(prev=>prev==='white'?'black':'white');setDice([0,0]);setAvailableDice([]);// Clear dice for the next turn.\nsetSelectedPoint(null);setPossibleMovesInfo([]);// Clear possible moves info\nsetMustReenterFromBar(false);// Reset bar state for the next turn.\nsetGameMessage(\"Turn ended. It's now \".concat(getOpponentColor(currentPlayer).charAt(0).toUpperCase()+getOpponentColor(currentPlayer).slice(1),\"'s turn. Roll the dice!\"));setMoveHistory([]);// Clear history for the new turn\n},[isPlaying,boardState.home.white,boardState.home.black,initializeBoard,currentPlayer,getOpponentColor,endMatch]);// Performs a checker move on the board.\n// diceToConsume is now an array of numbers, e.g., [4], [2, 4], [3, 3, 3]\nconst performMove=useCallback((fromPoint,toPoint,diceToConsume)=>{const newBoardState=JSON.parse(JSON.stringify(boardState));// Deep copy to ensure immutability.\nlet checkerToMove;if(fromPoint==='bar'){// Move from the bar.\nif(newBoardState.bar[currentPlayer]>0){newBoardState.bar[currentPlayer]--;checkerToMove=currentPlayer;}else{console.error(\"No checkers on bar to move!\");setGameMessage(\"Error: No checkers on bar to move!\");return;}}else{// Move from a regular point.\nconst sourcePoint=newBoardState.points[fromPoint-1];if(sourcePoint.checkers.length===0||sourcePoint.checkers[0]!==currentPlayer){console.error(\"Invalid move: No checker of current player at source point.\");setGameMessage(\"Error: No checker of current player at source point.\");return;}checkerToMove=sourcePoint.checkers.pop();// Remove checker from source.\n}// Determine if a blot was hit BEFORE modifying newBoardState\nlet hitOpponentChecker=false;let hitCheckerColor=null;// Point 0 is white's bear-off, Point 25 is black's bear-off\nconst isBearingOff=toPoint===0||toPoint===25;if(!isBearingOff&&newBoardState.points[toPoint-1].checkers.length===1&&newBoardState.points[toPoint-1].checkers[0]===getOpponentColor(currentPlayer)){hitOpponentChecker=true;hitCheckerColor=getOpponentColor(currentPlayer);// The color of the checker that was hit\n}// Handle bearing off (moving to point 0 or 25).\nif(isBearingOff){if(toPoint===0){// White bearing off\nnewBoardState.home.white++;}else{// Black bearing off (toPoint === 25)\nnewBoardState.home.black++;}setBoardState(newBoardState);setGameMessage(\"\".concat(currentPlayer.charAt(0).toUpperCase()+currentPlayer.slice(1),\" checker borne off!\"));setSelectedPoint(null);// Deselect.\n// Consume the used dice.\nlet newAvailableDice=[...availableDice];diceToConsume.forEach(die=>{const index=newAvailableDice.indexOf(die);if(index>-1){newAvailableDice.splice(index,1);}else{console.warn(\"Attempted to consume die \".concat(die,\" but it was not found in available dice:\"),newAvailableDice);}});setAvailableDice(newAvailableDice);setPossibleMovesInfo([]);// Clear possible moves info\n// Record the move in history\nsetMoveHistory(prevHistory=>[...prevHistory,{fromPoint,toPoint,checkerColor:currentPlayer,hitOpponentChecker:false,// Bearing off never hits opponent\nhitCheckerColor:null,usedDice:diceToConsume// Store the array of dice used\n}]);// Check for immediate game win after bearing off.\nif(newBoardState.home.white===15||newBoardState.home.black===15){endTurn();}else{// Check if any further moves are possible with the remaining dice and updated board state\nconst hasMoreMoves=checkIfAnyPossibleMoves(newBoardState,currentPlayer,newAvailableDice);if(newAvailableDice.length===0||!hasMoreMoves){setTimeout(endTurn,1000);// Add a small delay for message visibility\n}}return;}// If a blot was hit, move opponent's checker to the bar. This happens before adding current player's checker.\nif(hitOpponentChecker){newBoardState.points[toPoint-1].checkers.pop();// Remove opponent's checker.\nnewBoardState.bar[hitCheckerColor]++;// Send it to the opponent's bar.\nsetGameMessage(\"Blot hit! \".concat(hitCheckerColor.charAt(0).toUpperCase()+hitCheckerColor.slice(1),\" checker sent to the bar.\"));}newBoardState.points[toPoint-1].checkers.push(checkerToMove);// Add current player's checker to destination.\nsetBoardState(newBoardState);setSelectedPoint(null);setGameMessage(\"Move made!\");// Record the move in history\nsetMoveHistory(prevHistory=>[...prevHistory,{fromPoint,toPoint,checkerColor:currentPlayer,hitOpponentChecker,hitCheckerColor,usedDice:diceToConsume// Store the array of dice used\n}]);// Consume the used dice after the move.\nlet newAvailableDice=[...availableDice];diceToConsume.forEach(die=>{const index=newAvailableDice.indexOf(die);if(index>-1){newAvailableDice.splice(index,1);}else{console.warn(\"Attempted to consume die \".concat(die,\" but it was not found in available dice:\"),newAvailableDice);}});setAvailableDice(newAvailableDice);setPossibleMovesInfo([]);// Clear possible moves info\n// If no more dice are available after this move, or no more moves possible, automatically end the turn.\nconst hasMoreMoves=checkIfAnyPossibleMoves(newBoardState,currentPlayer,newAvailableDice);if(newAvailableDice.length===0||!hasMoreMoves){setTimeout(endTurn,1000);// Add a small delay for message visibility\n}},[boardState,availableDice,currentPlayer,endTurn,getOpponentColor,checkIfAnyPossibleMoves,setMoveHistory]);// Removed whitePath, blackPath from dependencies as they're not direct args\n// Handles rolling the dice. This function is passed to the Dice component as a callback.\nconst rollDiceHandler=useCallback((die1,die2)=>{// Now accepts die values as arguments\nif(!isPlaying)return;const newAvailableDice=die1===die2?[die1,die1,die1,die1]:[die1,die2];setAvailableDice(newAvailableDice);setGameMessage(\"\".concat(currentPlayer==='white'?(currentUser===null||currentUser===void 0?void 0:currentUser.displayName)||'White Player':'Black Player',\" rolled a \").concat(die1,\" and a \").concat(die2,\". Now make your move.\"));setSelectedPoint(null);setPossibleMovesInfo([]);// Clear possible moves info.\nsetMoveHistory([]);// Clear move history at the start of a new roll/turn\n// Check if any moves are possible with the new dice and current board state\nconst initialPossibleMoves=checkIfAnyPossibleMoves(boardState,currentPlayer,newAvailableDice);if(boardState.bar[currentPlayer]>0&&!initialPossibleMoves){// If player has pieces on the bar AND cannot re-enter, skip turn.\nsetGameMessage(\"\".concat(currentPlayer.charAt(0).toUpperCase()+currentPlayer.slice(1),\" has checkers on the bar and no valid moves. Turn skipped.\"));setTimeout(endTurn,2000);// Give player time to read message\nreturn;// Important: exit here to prevent normal turn flow\n}else if(!initialPossibleMoves){// Normal case: no moves possible, but no checkers on bar\nsetGameMessage(\"No possible moves for \".concat(currentPlayer.charAt(0).toUpperCase()+currentPlayer.slice(1),\" with these dice. Turn ends.\"));setTimeout(endTurn,1500);// Give player a moment to read message\n}},[isPlaying,currentPlayer,currentUser,checkIfAnyPossibleMoves,boardState,endTurn,setMoveHistory]);// Removed whitePath, blackPath from dependencies as they're not direct args\n// Starts a new backgammon match.\nconst startMatch=()=>{setPlayerScore(0);setOpponentScore(0);setGameMessage(\"Match started! First to \".concat(Math.ceil(matchFormat/2),\" games wins. White rolls first!\"));setIsPlaying(true);setDice([0,0]);setAvailableDice([]);setCurrentPlayer('white');initializeBoard();// Reset board to initial state.\nsetSelectedPoint(null);setPossibleMovesInfo([]);// Clear possible moves info\nsetMustReenterFromBar(false);setMoveHistory([]);// Clear history at match start\n};// Closes the general info modal.\nconst closeModal=()=>{setShowModal(false);};const undoLastMove=useCallback(()=>{if(moveHistory.length===0){setGameMessage(\"No moves to undo!\");return;}const lastMove=moveHistory[moveHistory.length-1];const newMoveHistory=moveHistory.slice(0,-1);// Remove the last move\nsetMoveHistory(newMoveHistory);const newBoardState=JSON.parse(JSON.stringify(boardState));// Determine if it was a bearing off move\nconst isBearingOffMove=lastMove.toPoint===0||lastMove.toPoint===25;// 1. Move checker back\nif(isBearingOffMove){if(lastMove.toPoint===0){// White bearing off\nnewBoardState.home.white--;}else{// Black bearing off\nnewBoardState.home.black--;}// Place checker back on its original 'fromPoint'\nnewBoardState.points[lastMove.fromPoint-1].checkers.push(lastMove.checkerColor);}else{// Regular move: move checker from 'toPoint' back to 'fromPoint'\nif(!newBoardState.points[lastMove.toPoint-1]||newBoardState.points[lastMove.toPoint-1].checkers.length===0||newBoardState.points[lastMove.toPoint-1].checkers[newBoardState.points[lastMove.toPoint-1].checkers.length-1]!==lastMove.checkerColor){console.error(\"Error during undo: No checker of correct color at toPoint to move back.\");setGameMessage(\"Error undoing move. Please restart game if issues persist.\");return;}newBoardState.points[lastMove.toPoint-1].checkers.pop();// Remove from destination\n// Handle move from bar\nif(lastMove.fromPoint==='bar'){newBoardState.bar[lastMove.checkerColor]++;}else{newBoardState.points[lastMove.fromPoint-1].checkers.push(lastMove.checkerColor);// Return to original point\n}}// 2. If a blot was hit, move opponent's checker back from the bar\nif(lastMove.hitOpponentChecker&&lastMove.hitCheckerColor){newBoardState.bar[lastMove.hitCheckerColor]--;// For a blot, the opponent's checker was sent to the bar FROM `lastMove.toPoint`\nif(lastMove.toPoint!==0&&lastMove.toPoint!==25){// Ensure it wasn't a bear-off point itself\nnewBoardState.points[lastMove.toPoint-1].checkers.push(lastMove.hitCheckerColor);// Put opponent's checker back\n}}setBoardState(newBoardState);// 3. Refund the dice used in the last move\nsetAvailableDice(prevDice=>{let tempDice=[...prevDice];lastMove.usedDice.forEach(die=>{tempDice.push(die);// Add each die back\n});return tempDice.sort((a,b)=>b-a);// Sort for consistent display (descending)\n});// Clear selection and possible moves after undo\nsetSelectedPoint(null);setPossibleMovesInfo([]);setGameMessage(\"Last move undone.\");// Re-evaluate if re-entry from bar is needed after undo\n// Important: recalculate based on the *new* board state after undo\nif(newBoardState.bar[currentPlayer]>0){setMustReenterFromBar(true);// The available dice for recalculation should include the refunded dice\nconst updatedAvailableDice=[...availableDice,...lastMove.usedDice];// This may not be perfectly accurate if availableDice was already modified for other parts of the turn.\n// For true robustness, a full state snapshot per move is ideal.\n// For now, this assumes undoing to a point where the only available dice are what's remaining + refunded from this move.\nconst availableEntryMoves=calculatePossibleMoves('bar',updatedAvailableDice,currentPlayer,newBoardState);setPossibleMovesInfo(availableEntryMoves);}else{setMustReenterFromBar(false);}},[moveHistory,boardState,availableDice,currentPlayer,getOpponentColor,isPointBlocked,setAvailableDice,setSelectedPoint,setPossibleMovesInfo,setGameMessage,setMustReenterFromBar,calculatePossibleMoves]);// Effect to initialize the board on component mount or `initializeBoard` change.\nuseEffect(()=>{initializeBoard();},[initializeBoard]);// Effect to check for match end conditions.\nuseEffect(()=>{if(isPlaying){// If either player reaches half the match format score (rounded up), the match ends.\nif(playerScore>=Math.ceil(matchFormat/2)){endMatch(true);// Current player won the match.\n}else if(opponentScore>=Math.ceil(matchFormat/2)){endMatch(false);// Opponent won the match.\n}}},[playerScore,opponentScore,isPlaying,matchFormat,endMatch]);// Effect to manage `mustReenterFromBar` state and highlight valid bar entry moves.\nuseEffect(()=>{if(isPlaying&&boardState.bar[currentPlayer]>0){setMustReenterFromBar(true);setGameMessage(\"\".concat(currentPlayer.charAt(0).toUpperCase()+currentPlayer.slice(1),\" must re-enter checkers from the bar! Click on an available highlighted point to place your checker.\"));if(availableDice.length>0){// Calculate possible entry moves based on current dice and board state\nconst availableEntryMoves=calculatePossibleMoves('bar',availableDice,currentPlayer,boardState);setPossibleMovesInfo(availableEntryMoves);}}else{setMustReenterFromBar(false);// Clear highlights if no bar checkers and no checker is currently selected.\nif(selectedPoint===null&&possibleMovesInfo.length>0){setPossibleMovesInfo([]);}}},[boardState.bar,currentPlayer,isPlaying,availableDice,selectedPoint,calculatePossibleMoves,boardState,possibleMovesInfo.length]);// Effect to update possible moves when selected point, available dice, or player changes.\nuseEffect(()=>{if(selectedPoint!==null&&availableDice.length>0){const moves=calculatePossibleMoves(selectedPoint,availableDice,currentPlayer,boardState);// Only update if the moves array is different to prevent unnecessary renders\nif(JSON.stringify(moves)!==JSON.stringify(possibleMovesInfo)){setPossibleMovesInfo(moves);}}else if(selectedPoint===null&&possibleMovesInfo.length>0&&!mustReenterFromBar){// Clear possible moves when nothing is selected, unless re-entering from bar\nsetPossibleMovesInfo([]);}},[selectedPoint,availableDice,currentPlayer,boardState,calculatePossibleMoves,possibleMovesInfo,mustReenterFromBar]);// Handles a click on a board point.\nconst handlePointClick=pointNumber=>{if(!isPlaying||availableDice.length===0){setGameMessage(\"Please roll the dice and ensure moves are available!\");return;}// If the clicked point is already selected, deselect it.\nif(selectedPoint===pointNumber){setSelectedPoint(null);setPossibleMovesInfo([]);// Clear possible moves info\nsetGameMessage(\"Checker deselected.\");return;}// Handle clicks on bear-off areas as target points\nconst isClickOnBearOffArea=pointNumber===0||pointNumber===25;const targetMoveInfo=possibleMovesInfo.find(move=>move.targetPoint===pointNumber);if(mustReenterFromBar){// If checkers are on the bar, the only allowed action is to re-enter them.\nif(isClickOnBearOffArea){// Cannot bear off from bar\nsetGameMessage(\"You must re-enter checkers from the bar first.\");return;}if(targetMoveInfo){performMove('bar',pointNumber,targetMoveInfo.diceUsed);}else{setGameMessage(\"You must re-enter checkers from the bar. Please click one of the highlighted points.\");}return;}// If a checker is already selected, try to move it to the clicked point (including bear-off areas).\nif(selectedPoint!==null&&targetMoveInfo){performMove(selectedPoint,pointNumber,targetMoveInfo.diceUsed);// Pass the exact dice used\n}else{// No checker selected, or clicked an invalid target. Try to select a checker.\nif(isClickOnBearOffArea){// Cannot select a checker from a bear-off area\nsetGameMessage(\"You cannot select checkers from the bear-off area.\");setSelectedPoint(null);setPossibleMovesInfo([]);return;}const pointCheckers=boardState.points[pointNumber-1].checkers;if(pointCheckers.length>0&&pointCheckers[0]===currentPlayer){setSelectedPoint(pointNumber);// When a checker is selected, calculate and store its possible moves including the dice used.\nconst calculatedMoves=calculatePossibleMoves(pointNumber,availableDice,currentPlayer,boardState);setPossibleMovesInfo(calculatedMoves);setGameMessage(\"Selected checker from point \".concat(pointNumber,\". Now choose a destination.\"));}else{setGameMessage(\"You don't have checkers on this point or it's not your turn. Please select your own checker.\");setSelectedPoint(null);// Ensure no point is selected if invalid click.\nsetPossibleMovesInfo([]);// Clear possible moves info\n}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-6 rounded-xl shadow-2xl max-w-5xl mx-auto my-8\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-3xl font-extrabold text-blue-800 mb-6 text-center\",children:\"Play Backgammon\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-lg text-gray-700 mb-4 text-center\",children:[\"Current User: \",/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-600\",children:(currentUser===null||currentUser===void 0?void 0:currentUser.displayName)||'Guest'}),\" (ID: \",/*#__PURE__*/_jsx(\"span\",{className:\"font-mono text-xs break-words\",children:userId||'N/A'}),\")\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 bg-blue-50 rounded-lg shadow-inner col-span-1\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-blue-700 mb-3\",children:\"Match Settings\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"match-format\",className:\"block text-gray-700 font-medium mb-2\",children:\"Match Format (Best of N games):\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"match-format\",className:\"w-full p-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400\",value:matchFormat,onChange:e=>setMatchFormat(parseInt(e.target.value)),disabled:isPlaying,children:[/*#__PURE__*/_jsx(\"option\",{value:7,children:\"Best of 7\"}),/*#__PURE__*/_jsx(\"option\",{value:9,children:\"Best of 9\"}),/*#__PURE__*/_jsx(\"option\",{value:11,children:\"Best of 11\"}),/*#__PURE__*/_jsx(\"option\",{value:13,children:\"Best of 13\"}),/*#__PURE__*/_jsx(\"option\",{value:15,children:\"Best of 15\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 bg-green-50 rounded-lg shadow-inner flex flex-col justify-between col-span-2\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-green-700 mb-3\",children:\"Game Status\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-700 font-medium text-lg\",children:gameMessage})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 text-center\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-2xl font-bold text-gray-800\",children:[\"Score: \",playerScore,\" - \",opponentScore]}),isPlaying&&availableDice.length>0&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-md text-gray-600 mt-1\",children:[\"Remaining Dice: \",availableDice.join(', ')]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col md:flex-row gap-6 items-start\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-full md:w-3/4\",children:/*#__PURE__*/_jsx(BackgammonBoard,{board:boardState,currentPlayer:currentPlayer,onPointClick:handlePointClick,selectedPoint:selectedPoint,possibleMovePoints:possibleMovesInfo.map(m=>m.targetPoint)// Pass only the points for highlighting\n,currentDiceValues:dice})}),/*#__PURE__*/_jsxs(\"div\",{className:\"w-full md:w-1/4 flex flex-col gap-4\",children:[/*#__PURE__*/_jsx(Dice,{dice:dice,setDice:setDice,rollDice:rollDiceHandler,disabled:!isPlaying||availableDice.length>0}),isPlaying&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col gap-2 p-4 bg-gray-50 rounded-lg shadow-inner\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-md font-bold text-gray-700\",children:\"Turn Actions\"}),/*#__PURE__*/_jsx(\"button\",{onClick:undoLastMove,disabled:moveHistory.length===0||!isPlaying,className:\"bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",children:\"Undo Last Move\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setConfirmModalAction(()=>()=>{// Set the action to be performed on confirmation.\nconst newBoardState=JSON.parse(JSON.stringify(boardState));newBoardState.home.white=15;// Force White to win.\nsetBoardState(newBoardState);endTurn();// Trigger win logic and next game/match end.\nsetShowConfirmModal(false);// Close the confirmation modal.\n});setShowConfirmModal(true);// Show the confirmation modal.\nsetModalMessage(\"Are you sure you want to simulate White winning this game?\");// Set confirmation message.\n},className:\"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors\",children:\"Simulate White Win Game\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setConfirmModalAction(()=>()=>{// Set the action to be performed on confirmation.\nconst newBoardState=JSON.parse(JSON.stringify(boardState));newBoardState.home.black=15;// Force Black to win.\nsetBoardState(newBoardState);endTurn();// Trigger win logic and next game/match end.\nsetShowConfirmModal(false);// Close the confirmation modal.\n});setShowConfirmModal(true);// Show the confirmation modal.\nsetModalMessage(\"Are you sure you want to simulate Black winning this game?\");// Set confirmation message.\n},className:\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors\",children:\"Simulate Black Win Game\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap justify-center gap-4 mt-8\",children:!isPlaying?/*#__PURE__*/_jsx(\"button\",{onClick:startMatch,className:\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-purple-300\",children:\"Start New Match\"}):null}),showModal&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-lg p-8 shadow-2xl text-center max-w-sm w-full border-t-8 border-blue-600\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-2xl font-bold text-gray-800 mb-4\",children:\"Match Finished!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-700 mb-6\",children:modalMessage}),/*#__PURE__*/_jsx(\"button\",{onClick:closeModal,className:\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-full shadow-md transition-all duration-300 transform hover:scale-105\",children:\"OK\"})]})}),showConfirmModal&&/*#__PURE__*/_jsx(ConfirmModal,{message:modalMessage// Reusing modalMessage for confirmation message.\n,onConfirm:confirmModalAction// Execute the stored action on confirm.\n,onCancel:()=>setShowConfirmModal(false)// Just close on cancel.\n})]});};// --- Other Shared Components ---\n// Header Component: Navigation and user info display.\nconst Header=_ref6=>{let{onNavigate}=_ref6;const{currentUser,logout}=useContext(AuthContext);return/*#__PURE__*/_jsx(\"header\",{className:\"bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-lg rounded-b-lg mb-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container mx-auto flex flex-col sm:flex-row justify-between items-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-extrabold text-yellow-300 tracking-wide mb-3 sm:mb-0\",children:\"Backgammon Royale\"}),/*#__PURE__*/_jsxs(\"nav\",{className:\"flex flex-wrap justify-center sm:justify-end gap-3 sm:gap-4\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>onNavigate('game'),className:\"px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-blue-900 font-semibold rounded-lg shadow-md transition-transform transform hover:scale-105 flex items-center gap-2\",children:\"Game\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>onNavigate('stats'),className:\"px-4 py-2 bg-green-500 hover:bg-green-600 text-white font-semibold rounded-lg shadow-md transition-transform transform hover:scale-105 flex items-center gap-2\",children:\"Rankings\"}),currentUser&&!currentUser.isAnonymous&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2 bg-blue-500 px-4 py-2 rounded-lg shadow-md\",children:[/*#__PURE__*/_jsx(\"img\",{src:currentUser.photoURL||'https://placehold.co/24x24/cccccc/000000?text=U',alt:\"User Avatar\",className:\"w-6 h-6 rounded-full border border-yellow-300\"}),/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-sm hidden md:block\",children:currentUser.displayName||'Guest'}),/*#__PURE__*/_jsx(\"button\",{onClick:logout,className:\"px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm font-semibold rounded-lg shadow-inner transition-colors\",children:\"Logout\"})]})]})]})});};// LoginPage Component: Handles user authentication.\nconst LoginPage=()=>{var _auth2,_auth2$currentUser;const{signInWithGoogle,loadingAuth}=useContext(AuthContext);if(loadingAuth){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center h-screen bg-gray-100\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-semibold text-gray-700\",children:\"Loading authentication...\"})});}return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 flex items-center justify-center p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-8 rounded-xl shadow-2xl max-w-md w-full text-center border-t-4 border-blue-500\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-3xl font-extrabold text-gray-800 mb-6\",children:\"Welcome to Backgammon Royale\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-600 mb-8\",children:\"Sign in to play games, track your stats, and see how you rank against other players!\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:signInWithGoogle,className:\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 flex items-center justify-center mx-auto\",children:[/*#__PURE__*/_jsxs(\"svg\",{className:\"w-5 h-5 mr-3\",viewBox:\"0 0 24 24\",fill:\"currentColor\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M22.675 12.001c0-.78-.068-1.536-.182-2.272H12v4.265h6.398c-.282 1.39-1.048 2.583-2.227 3.376v2.774h3.565c2.08-1.922 3.284-4.743 3.284-8.143z\",fill:\"#4285F4\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M12 23c3.228 0 5.922-1.066 7.896-2.883l-3.565-2.774c-.98.667-2.245 1.054-3.561 1.054-2.766 0-5.1-1.868-5.952-4.382H2.42v2.851C4.305 20.258 7.964 23 12 23z\",fill:\"#34A853\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M5.952 14.265c-.25-1.05-.39-2.16-.39-3.265s.14-2.215.39-3.265V4.881H2.42C.876 7.234 0 9.567 0 12s.876 4.766 2.42 7.119L5.952 14.265z\",fill:\"#FBBC05\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M12 4.615c1.761 0 3.35.602 4.606 1.795l3.16-3.16c-1.85-1.74-4.26-2.83-7.766-2.83C7.964 0 4.305 2.742 2.42 7.119l3.532 2.774C6.9 6.483 9.234 4.615 12 4.615z\",fill:\"#EA4335\"})]}),\"Sign in with Google\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-gray-500 mt-6\",children:[\"Your current user ID is: \",/*#__PURE__*/_jsx(\"span\",{className:\"font-mono text-gray-700 break-words\",children:((_auth2=auth)===null||_auth2===void 0?void 0:(_auth2$currentUser=_auth2.currentUser)===null||_auth2$currentUser===void 0?void 0:_auth2$currentUser.uid)||'Not signed in'})]}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-xs text-gray-500\",children:\"By signing in, you agree to our terms of service and privacy policy.\"})]})});};// StatsPage Component: Displays player rankings and statistics.\nconst StatsPage=()=>{const{currentUser,userId,loadingAuth}=useContext(AuthContext);const[users,setUsers]=useState([]);const[loadingStats,setLoadingStats]=useState(true);const[sortBy,setSortBy]=useState('winLossRatio');// Criteria for sorting.\nconst[sortOrder,setSortOrder]=useState('desc');// Sorting order.\nconst[filterType,setFilterType]=useState('all');// Filter for 'all' or 'mine' stats.\nuseEffect(()=>{// Only proceed if Firestore is initialized and authentication is loaded.\nif(!db||loadingAuth){if(!db)console.warn(\"StatsPage: db is not initialized.\");if(loadingAuth)console.log(\"StatsPage: Auth is still loading.\");return;}setLoadingStats(true);console.log(\"StatsPage: Attempting to fetch users from Firestore...\");// Fetch users in real-time.\nconst unsubscribe=FirestoreService.getUsers(fetchedUsers=>{console.log(\"StatsPage: Fetched users:\",fetchedUsers);// Process fetched users to calculate win/loss ratio and total matches.\nconst processedUsers=fetchedUsers.map(user=>{const totalMatches=(user.totalMatchesWon||0)+(user.totalMatchesLost||0);return _objectSpread(_objectSpread({},user),{},{winLossRatio:totalMatches>0?(user.totalMatchesWon||0)/totalMatches:0,totalMatches:totalMatches});});setUsers(processedUsers);setLoadingStats(false);// Stats loading complete.\nconsole.log(\"StatsPage: Users state updated, loadingStats set to false.\");});// Cleanup function: unsubscribe from Firestore listener.\nreturn()=>{console.log(\"StatsPage: Cleaning up Firestore listener.\");unsubscribe();};},[db,loadingAuth]);// Re-run effect when db or loadingAuth changes.\n// Filter and sort users based on current criteria.\nconst sortedAndFilteredUsers=[...users].filter(user=>{if(filterType==='mine'&&userId){return user.id===userId;// Only show current user's stats.\n}return true;// Show all users.\n}).sort((a,b)=>{let valA,valB;// Assign values based on sorting criteria.\nif(sortBy==='winLossRatio'){valA=a.winLossRatio;valB=b.winLossRatio;}else if(sortBy==='totalMatchesWon'){valA=a.totalMatchesWon||0;valB=b.totalMatchesWon||0;}else if(sortBy==='totalGamesWon'){valA=a.totalGamesWon||0;valB=b.totalGamesWon||0;}else if(sortBy==='totalMatches'){valA=a.totalMatches||0;valB=b.totalMatches||0;}else{// Default to totalGamesPlayed\nvalA=a.totalGamesPlayed||0;valB=b.totalGamesPlayed||0;}// Apply sorting order.\nif(sortOrder==='asc'){return valA-valB;}else{return valB-valA;// Corrected the sorting logic to use valA and valB consistently\n}});if(loadingAuth||loadingStats){return/*#__PURE__*/_jsx(\"div\",{className:\"text-center py-8\",children:\"Loading rankings...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-6 rounded-xl shadow-2xl max-w-6xl mx-auto my-8\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-3xl font-extrabold text-green-800 mb-6 text-center\",children:\"Player Rankings\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col md:flex-row gap-4 mb-6 p-4 bg-gray-50 rounded-lg shadow-inner justify-between items-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"filter\",className:\"font-semibold text-gray-700\",children:\"Filter:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"filter\",className:\"p-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400\",value:filterType,onChange:e=>setFilterType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All Players\"}),currentUser&&!currentUser.isAnonymous&&/*#__PURE__*/_jsx(\"option\",{value:\"mine\",children:\"My Stats\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2 mt-4 md:mt-0\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sortBy\",className:\"font-semibold text-gray-700\",children:\"Sort By:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"sortBy\",className:\"p-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400\",value:sortBy,onChange:e=>setSortBy(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"winLossRatio\",children:\"Win/Loss Ratio\"}),/*#__PURE__*/_jsx(\"option\",{value:\"totalMatchesWon\",children:\"Total Matches Won\"}),/*#__PURE__*/_jsx(\"option\",{value:\"totalGamesWon\",children:\"Total Games Won\"}),/*#__PURE__*/_jsx(\"option\",{value:\"totalGamesPlayed\",children:\"Total Games Played (within matches)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"totalMatches\",children:\"Total Matches Played\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center gap-2 mt-4 md:mt-0\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>setSortOrder(sortOrder==='asc'?'desc':'asc'),className:\"p-2 bg-gray-200 hover:bg-gray-300 rounded-lg shadow-sm transition-colors flex items-center gap-1\",children:sortOrder==='asc'?/*#__PURE__*/_jsx(\"span\",{children:\"\\u2191 Ascending\"}):/*#__PURE__*/_jsx(\"span\",{children:\"\\u2193 Descending\"})})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto rounded-lg shadow-md border border-gray-200\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"min-w-full divide-y divide-gray-200\",children:[/*#__PURE__*/_jsx(\"thead\",{className:\"bg-blue-100\",children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Rank\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Player\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"User ID\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Matches Won\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Matches Lost\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Win/Loss Ratio\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Games Won\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Games Lost\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 whitespace-nowrap text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Total Games Played\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-3 whitespace-nowrap text-left text-xs font-medium text-blue-700 uppercase tracking-wider\",children:\"Total Matches Played\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{className:\"bg-white divide-y divide-gray-200\",children:sortedAndFilteredUsers.length===0?/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"10\",className:\"px-4 py-4 text-center text-gray-500\",children:\"No players found or no data available. Play some matches!\"})}):sortedAndFilteredUsers.map((user,index)=>/*#__PURE__*/_jsxs(\"tr\",{className:\"\".concat(user.id===userId?'bg-yellow-50 font-bold':'hover:bg-gray-50'),children:[/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\",children:index+1}),/*#__PURE__*/_jsxs(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm font-medium text-blue-800 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"img\",{src:user.photoURL||'https://placehold.co/24x24/cccccc/000000?text=U',alt:\"Avatar\",className:\"w-6 h-6 rounded-full border border-gray-300\"}),user.displayName]}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 text-sm text-gray-700 font-mono text-xs break-words\",children:user.id}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.totalMatchesWon||0}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.totalMatchesLost||0}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.winLossRatio.toFixed(3)}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.totalGamesWon||0}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.totalGamesLost||0}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.totalGamesPlayed||0}),/*#__PURE__*/_jsx(\"td\",{className:\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\",children:user.totalMatches||0})]},user.id))})]})}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-6 text-sm text-gray-500 text-center\",children:\"Note: \\\"Total Games Played\\\" refers to individual games within a best-of-N match.\"})]});};// --- Main App Component ---\n// This component handles routing and overall application layout.\nconst App=()=>{const[currentPage,setCurrentPage]=useState('game');// State to control which page is displayed.\nconst{currentUser,loadingAuth}=useContext(AuthContext);// Access authentication state from context.\nconsole.log(\"App component rendering. CurrentPage:\",currentPage,\"LoadingAuth:\",loadingAuth,\"CurrentUser:\",currentUser===null||currentUser===void 0?void 0:currentUser.uid);// Display a loading indicator while authentication state is being determined.\nif(loadingAuth){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gray-100 font-inter antialiased flex items-center justify-center\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-semibold text-gray-700\",children:\"Loading application...\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gray-100 font-inter antialiased\",children:[/*#__PURE__*/_jsx(Header,{onNavigate:setCurrentPage}),\" \",/*#__PURE__*/_jsx(\"main\",{className:\"container mx-auto p-4\",children:!currentUser||currentUser.isAnonymous?/*#__PURE__*/_jsx(LoginPage,{}):/*#__PURE__*/_jsxs(_Fragment,{children:[currentPage==='game'&&/*#__PURE__*/_jsx(BackgammonGame,{onMatchEnd:()=>setCurrentPage('stats')}),currentPage==='stats'&&/*#__PURE__*/_jsx(StatsPage,{})]})})]});};// The top-level component that wraps the entire application with AuthProvider.\n// This is crucial for useContext(AuthContext) to work throughout the app.\nconst RootApp=()=>/*#__PURE__*/_jsx(AuthProvider,{children:/*#__PURE__*/_jsx(App,{})});export default RootApp;","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","useCallback","useRef","initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","onAuthStateChanged","signInAnonymously","signOut","signInWithCustomToken","getFirestore","doc","getDoc","setDoc","updateDoc","collection","query","onSnapshot","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","firebaseConfig","__firebase_config","JSON","parse","appId","__app_id","app","db","auth","Object","keys","length","console","log","warn","error","message","includes","AuthContext","AuthProvider","_ref","children","currentUser","setCurrentUser","userId","setUserId","loadingAuth","setLoadingAuth","unsubscribe","user","uid","userRef","userSnap","exists","displayName","email","photoURL","createdAt","Date","totalGamesPlayed","totalMatchesWon","totalGamesWon","totalGamesLost","winLossRatio","firestoreError","__initial_auth_token","anonError","signInWithGoogle","provider","logout","Provider","value","FirestoreService","saveMatchResult","matchData","matchesCollectionRef","_objectSpread","timestamp","updateUserStats","statsUpdate","concat","getUsers","callback","_auth","_auth$currentUser","usersCollectionRef","q","snapshot","users","docs","map","id","data","Dice","_ref2","dice","setDice","rollDice","disabled","isRolling","setIsRolling","handleRollDice","rollCount","maxRolls","rollInterval","finalDie1","finalDie2","animateRoll","setInterval","Math","floor","random","clearInterval","className","onClick","BackgammonBoard","_ref3","board","currentPlayer","onPointClick","selectedPoint","possibleMovePoints","currentDiceValues","pointHeight","checkerRadius","boardWidth","boardHeight","barWidth","bearOffAreaWidth","visualPointMapping","gamePoint","isTop","indexInHalf","colorOffset","halfBoardSectionWidth","pointWidth","boardBgColor","pointColor1","pointColor2","barFill","bearOffFill","viewBox","preserveAspectRatio","x1","y1","x2","y2","offset","stopColor","x","y","width","height","type","baseFrequency","numOctaves","result","in","in2","scale","xChannelSelector","yChannelSelector","operator","patternUnits","fill","cx","cy","r","opacity","stroke","strokeWidth","pointData","fillColor","currentPointX","trianglePoints","isSelected","isPossibleMove","points","checkers","color","checkerIdx","checkerY","checkerCountOnPoint","textAnchor","dominantBaseline","fontSize","fontWeight","isCurrentPlayerChecker","checkerStrokeColor","checkerStrokeWidth","checkerFill","checkerFilter","filter","e","stopPropagation","bar","white","Array","min","_","idx","black","home","rx","ry","ConfirmModal","_ref4","onConfirm","onCancel","BackgammonGame","_ref5","onMatchEnd","matchFormat","setMatchFormat","playerScore","setPlayerScore","opponentScore","setOpponentScore","gameMessage","setGameMessage","isPlaying","setIsPlaying","showModal","setShowModal","modalMessage","setModalMessage","showConfirmModal","setShowConfirmModal","confirmModalAction","setConfirmModalAction","availableDice","setAvailableDice","setCurrentPlayer","setSelectedPoint","possibleMovesInfo","setPossibleMovesInfo","mustReenterFromBar","setMustReenterFromBar","moveHistory","setMoveHistory","whitePath","blackPath","boardState","setBoardState","initializeBoard","newPoints","getOpponentColor","playerColor","isPointBlocked","pointIndex","currentBoardState","arguments","undefined","point","opponentColor","areAllCheckersInHomeBoard","totalCheckers","checkersBorneOff","checkersInHomeQuadrantOnBoard","isWhite","homePointsForBearingOff","i","checkersOnCurrentPoint","c","checkIfAnyPossibleMoves","player","currentDice","playerPath","die","targetGamePoint","targetPointIndex","currentPointCheckers","fromPoint","fromPointIndexInPath","indexOf","targetPathIndex","noCheckersEarlierInPath","homePoints","fromPointHomeIndex","k","furtherPointOnBoard","dieCanOvershoot","isFurthestChecker","calculatePossibleMoves","moves","checkSingleStepLogic","startPoint","startPathIndex","tempBoard","isInitialFromBar","isValid","isBearingOff","noCheckersFurtherAway","furtherPoint","distanceToBearOff","actualTargetGamePoint","forEach","push","targetPoint","diceUsed","findAllMoves","currentFromPoint","currentFromPathIndex","remainingDice","currentBoard","pathDice","uniqueDiceConsidered","Set","sortedRemainingDice","sort","a","b","d1","originalIdx","tempRemainingDice","actualIdx","splice","tempBoardAfterD1","stringify","checkerSuccessfullyMovedInTemp","pop","intermediatePoint","isValidIntermediate","isIntermedBearOff","currentPathDice","intermediatePointPathIndex","uniqueMovesMap","Map","move","key","currentDiceUsedStr","join","has","set","existingMove","get","existingDiceUsedStr","sumCurrent","reduce","sum","d","sumExisting","from","values","endMatch","playerWon","winnerGames","loserGames","isAnonymous","matchResult","player1Id","player1DisplayName","player2Id","player2DisplayName","winnerId","loserId","player1GamesWon","player2GamesWon","userStatsUpdate","totalMatchesLost","newTotalMatches","toFixed","endTurn","prev","charAt","toUpperCase","slice","performMove","toPoint","diceToConsume","newBoardState","checkerToMove","sourcePoint","hitOpponentChecker","hitCheckerColor","newAvailableDice","index","prevHistory","checkerColor","usedDice","hasMoreMoves","setTimeout","rollDiceHandler","die1","die2","initialPossibleMoves","startMatch","ceil","closeModal","undoLastMove","lastMove","newMoveHistory","isBearingOffMove","prevDice","tempDice","updatedAvailableDice","availableEntryMoves","handlePointClick","pointNumber","isClickOnBearOffArea","targetMoveInfo","find","pointCheckers","calculatedMoves","htmlFor","onChange","parseInt","target","m","Header","_ref6","onNavigate","src","alt","LoginPage","_auth2","_auth2$currentUser","StatsPage","setUsers","loadingStats","setLoadingStats","sortBy","setSortBy","sortOrder","setSortOrder","filterType","setFilterType","fetchedUsers","processedUsers","totalMatches","sortedAndFilteredUsers","valA","valB","colSpan","App","currentPage","setCurrentPage","RootApp"],"sources":["C:/Users/Pertel/Desktop/my-ttavli-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext, useCallback, useRef } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged, signInAnonymously, signOut, signInWithCustomToken } from 'firebase/auth';\r\nimport { getFirestore, doc, getDoc, setDoc, updateDoc, collection, query, onSnapshot } from 'firebase/firestore';\r\n// Tone.js imports removed as requested to resolve compilation issues.\r\n// import * as Tone from 'tone'; // Removed\r\n\r\n// Tailwind CSS is assumed to be available in the environment via a global CDN.\r\n\r\n// --- Firebase Configuration and Initialization ---\r\n// Retrieve Firebase configuration and app ID from the environment.\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n\r\n// Declare Firebase instances globally so they are initialized once.\r\nlet app;\r\nlet db;\r\nlet auth;\r\n\r\ntry {\r\n  // Initialize Firebase only if the configuration is provided.\r\n  if (Object.keys(firebaseConfig).length > 0) {\r\n    app = initializeApp(firebaseConfig);\r\n    db = getFirestore(app);\r\n    auth = getAuth(app);\r\n    console.log(\"Firebase initialized successfully.\");\r\n  } else {\r\n    // Log a warning if Firebase config is missing, indicating demo mode.\r\n    console.warn(\"Firebase config not found. Running in demo mode without persistence.\");\r\n  }\r\n} catch (error) {\r\n  // Catch and log any errors during Firebase initialization.\r\n  // Ignore \"already exists\" errors, which can occur during hot reloading.\r\n  console.error(\"Firebase initialization error at global scope:\", error);\r\n  if (!error.message.includes(\"already exists\")) {\r\n    console.error(\"Failed to initialize Firebase:\", error);\r\n  }\r\n}\r\n\r\n// --- Auth Context for User Management ---\r\n// Create a React context to make authentication state and functions available throughout the app.\r\nconst AuthContext = createContext(null);\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null); // Stores Firebase user object\r\n  const [userId, setUserId] = useState(null);           // Stores the user's UID or a generated ID for anonymous users\r\n  const [loadingAuth, setLoadingAuth] = useState(true); // Indicates if authentication state is still being determined\r\n\r\n  useEffect(() => {\r\n    // If Firebase Auth is not initialized, stop loading and return.\r\n    if (!auth) {\r\n      console.warn(\"Auth object is undefined, skipping auth listener setup.\");\r\n      setLoadingAuth(false);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Setting up onAuthStateChanged listener...\");\r\n    // Subscribe to Firebase authentication state changes.\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      console.log(\"onAuthStateChanged triggered. User:\", user ? user.uid : 'null');\r\n      if (user) {\r\n        // If a user is logged in (or anonymously authenticated)\r\n        setCurrentUser(user);\r\n        setUserId(user.uid);\r\n        if (db) { // Ensure Firestore is initialized before interacting with it.\r\n          const userRef = doc(db, 'artifacts', appId, 'users', user.uid);\r\n          try {\r\n            // Check if user profile exists in Firestore and create if not.\r\n            const userSnap = await getDoc(userRef);\r\n            if (!userSnap.exists()) {\r\n              await setDoc(userRef, {\r\n                displayName: user.displayName || 'Anonymous User',\r\n                email: user.email || '',\r\n                photoURL: user.photoURL || '',\r\n                createdAt: new Date(),\r\n                totalGamesPlayed: 0,\r\n                totalMatchesWon: 0,\r\n                totalGamesWon: 0,\r\n                totalGamesLost: 0,\r\n                winLossRatio: 0,\r\n              });\r\n              console.log(\"New user profile created or existing updated.\");\r\n            }\r\n          } catch (firestoreError) {\r\n            console.error(\"Error accessing user document in Firestore:\", firestoreError);\r\n          }\r\n        }\r\n      } else {\r\n        // If no user is logged in, attempt anonymous sign-in or use custom token.\r\n        setCurrentUser(null);\r\n        setUserId(null);\r\n        console.log(\"User logged out or anonymous.\");\r\n        if (auth && typeof __initial_auth_token !== 'undefined') {\r\n          try {\r\n            // Attempt to sign in with a provided custom token.\r\n            await signInWithCustomToken(auth, __initial_auth_token);\r\n            console.log(\"Signed in with custom token.\");\r\n          } catch (error) {\r\n            console.error(\"Error signing in with custom token:\", error);\r\n            try {\r\n              // Fallback to anonymous sign-in if custom token fails.\r\n              await signInAnonymously(auth);\r\n              console.log(\"Signed in anonymously after custom token error.\");\r\n            } catch (anonError) {\r\n              console.error(\"Error signing in anonymously:\", anonError);\r\n            }\r\n          }\r\n        } else if (auth) {\r\n          try {\r\n            // If no custom token, sign in anonymously.\r\n            await signInAnonymously(auth);\r\n            console.log(\"Signed in anonymously.\");\r\n          } catch (anonError) {\r\n            console.error(\"Error signing in anonymously:\", anonError);\r\n          }\r\n        }\r\n      }\r\n      setLoadingAuth(false); // Authentication loading is complete.\r\n      console.log(\"Auth loading finished.\");\r\n    });\r\n\r\n    // Cleanup function for the effect: unsubscribe from auth state changes.\r\n    return () => {\r\n      console.log(\"Cleaning up onAuthStateChanged listener.\");\r\n      unsubscribe();\r\n    };\r\n  }, [appId]); // Re-run effect only if appId changes.\r\n\r\n  // Function to sign in with Google.\r\n  const signInWithGoogle = async () => {\r\n    if (!auth) {\r\n      console.error(\"Firebase Auth not initialized. Cannot sign in.\");\r\n      return;\r\n    }\r\n    const provider = new GoogleAuthProvider();\r\n    try {\r\n      console.log(\"Attempting Google sign-in popup...\");\r\n      await signInWithPopup(auth, provider);\r\n      console.log(\"Google sign-in successful.\");\r\n    } catch (error) {\r\n      console.error(\"Error signing in with Google:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to log out the current user.\r\n  const logout = async () => {\r\n    if (auth) {\r\n      try {\r\n        console.log(\"Attempting to log out...\");\r\n        await signOut(auth);\r\n        console.log(\"User logged out successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Error signing out:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Provide auth state and functions to children components.\r\n  return (\r\n    <AuthContext.Provider value={{ currentUser, userId, loadingAuth, signInWithGoogle, logout, db, appId }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// --- Firestore Service for Data Operations ---\r\n// Centralized service for interacting with Firestore.\r\nconst FirestoreService = {\r\n  // Saves a match result to a public collection in Firestore.\r\n  saveMatchResult: async (matchData) => {\r\n    if (!db) {\r\n      console.warn(\"Firestore not initialized. Cannot save match result.\");\r\n      return;\r\n    }\r\n    try {\r\n      const matchesCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'matches');\r\n      await setDoc(doc(matchesCollectionRef), {\r\n        ...matchData,\r\n        timestamp: new Date(),\r\n      });\r\n      console.log(\"Match result saved successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error saving match result:\", error);\r\n    }\r\n  },\r\n\r\n  // Updates a user's statistics in their private Firestore document.\r\n  updateUserStats: async (userId, statsUpdate) => {\r\n    if (!db || !userId) {\r\n      console.warn(\"Firestore not initialized or userId missing. Cannot update user stats.\");\r\n      return;\r\n    }\r\n    try {\r\n      const userRef = doc(db, 'artifacts', appId, 'users', userId);\r\n      await updateDoc(userRef, statsUpdate);\r\n      console.log(`User ${userId} stats updated.`);\r\n    } catch (error) {\r\n      console.error(\"Error updating user stats:\", error);\r\n    }\r\n  },\r\n\r\n  // Fetches all user profiles in real-time using a snapshot listener.\r\n  getUsers: (callback) => {\r\n    if (!db) {\r\n      console.warn(\"Firestore not initialized. Cannot get users.\");\r\n      return () => {}; // Return a no-op unsubscribe function if db isn't ready.\r\n    }\r\n    console.log(\"Attempting to fetch users. Current Auth User ID:\", auth?.currentUser?.uid);\r\n    const usersCollectionRef = collection(db, 'artifacts', appId, 'users');\r\n    const q = query(usersCollectionRef);\r\n    // onSnapshot provides real-time updates.\r\n    return onSnapshot(q, (snapshot) => {\r\n      const users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      console.log(\"Users fetched:\", users.length, \"users.\");\r\n      callback(users);\r\n    }, (error) => {\r\n      console.error(\"Error fetching users:\", error);\r\n    });\r\n  }\r\n};\r\n\r\n// --- Game Components ---\r\n\r\n// Dice Component: Displays dice values and a roll button with animation.\r\nconst Dice = ({ dice, setDice, rollDice, disabled }) => { // Removed soundEnabled prop\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  // Tone.js sound refs removed.\r\n  // const rollEventSynthRef = useRef(null);\r\n  // const impactSynthRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Tone.js synth initialization and cleanup removed.\r\n    // Cleanup function for the effect:\r\n    return () => {\r\n      // if (rollEventSynthRef.current) {\r\n      //   rollEventSynthRef.current.dispose();\r\n      //   rollEventSynthRef.current = null;\r\n      // }\r\n      // if (impactSynthRef.current) {\r\n      //   impactSynthRef.current.dispose();\r\n      //   impactSynthRef.current = null;\r\n      // }\r\n    };\r\n  }, []);\r\n\r\n  // Tone.js sound playing function removed.\r\n  // const playDiceRollSound = async (duration = 0.8) => { /* ... removed ... */ };\r\n\r\n  const handleRollDice = async () => {\r\n    if (disabled || isRolling) return;\r\n\r\n    setIsRolling(true);\r\n    // playDiceRollSound(0.8); // Call to sound function removed\r\n\r\n    // Simulate rolling animation by rapidly changing dice numbers\r\n    let rollCount = 0;\r\n    const maxRolls = 15; // Increased rolls for longer animation\r\n    const rollInterval = 50; // Shorter interval for faster animation\r\n    let finalDie1, finalDie2; // Variables to store the final dice values\r\n\r\n    const animateRoll = setInterval(() => {\r\n        if (rollCount < maxRolls) {\r\n            setDice([\r\n                Math.floor(Math.random() * 6) + 1,\r\n                Math.floor(Math.random() * 6) + 1\r\n            ]);\r\n            rollCount++;\r\n        } else {\r\n            clearInterval(animateRoll);\r\n            setIsRolling(false);\r\n            // Generate the final dice values after animation\r\n            finalDie1 = Math.floor(Math.random() * 6) + 1;\r\n            finalDie2 = Math.floor(Math.random() * 6) + 1;\r\n            setDice([finalDie1, finalDie2]); // Ensure the displayed dice match the final values\r\n            rollDice(finalDie1, finalDie2); // Pass final values to the game logic\r\n        }\r\n    }, rollInterval);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center p-4 bg-gray-100 rounded-lg shadow-inner\">\r\n      <h3 className=\"text-xl font-bold text-gray-800 mb-3\">Dice</h3>\r\n      {/* Dice display removed from here to be moved onto the board */}\r\n      <button\r\n        onClick={handleRollDice}\r\n        disabled={disabled || isRolling}\r\n        className={`px-6 py-2 rounded-full font-semibold shadow-md transition-all duration-200 ${\r\n          disabled || isRolling ? 'bg-gray-300 text-gray-600 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 text-white transform hover:scale-105'\r\n        }`}\r\n      >\r\n        {isRolling ? 'Rolling...' : 'Roll Dice'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Backgammon Board Component: Renders the SVG-based backgammon board.\r\nconst BackgammonBoard = ({ board, currentPlayer, onPointClick, selectedPoint, possibleMovePoints, currentDiceValues }) => {\r\n  // Define constants for board dimensions and checker size.\r\n  const pointHeight = 250;\r\n  const checkerRadius = 15;\r\n  const boardWidth = 720;\r\n  const boardHeight = 500;\r\n  const barWidth = 60;\r\n  const bearOffAreaWidth = 40; // Width of the new bear-off areas\r\n\r\n  // Define mapping for each point on the board to its visual position.\r\n  const visualPointMapping = [\r\n    // Top-left quadrant (points 13-18, visually from left to right)\r\n    { gamePoint: 13, isTop: true, indexInHalf: 0, colorOffset: 0 },\r\n    { gamePoint: 14, isTop: true, indexInHalf: 1, colorOffset: 1 },\r\n    { gamePoint: 15, isTop: true, indexInHalf: 2, colorOffset: 0 },\r\n    { gamePoint: 16, isTop: true, indexInHalf: 3, colorOffset: 1 },\r\n    { gamePoint: 17, isTop: true, indexInHalf: 4, colorOffset: 0 },\r\n    { gamePoint: 18, isTop: true, indexInHalf: 5, colorOffset: 1 },\r\n    // Top-right quadrant (points 19-24, visually from left to right)\r\n    { gamePoint: 19, isTop: true, indexInHalf: 6, colorOffset: 0 },\r\n    { gamePoint: 20, isTop: true, indexInHalf: 7, colorOffset: 1 },\r\n    { gamePoint: 21, isTop: true, indexInHalf: 8, colorOffset: 0 },\r\n    { gamePoint: 22, isTop: true, indexInHalf: 9, colorOffset: 1 },\r\n    { gamePoint: 23, isTop: true, indexInHalf: 10, colorOffset: 0 },\r\n    { gamePoint: 24, isTop: true, indexInHalf: 11, colorOffset: 1 },\r\n\r\n    // Bottom-left quadrant (points 12-7, visually from right to left)\r\n    { gamePoint: 12, isTop: false, indexInHalf: 0, colorOffset: 0 },\r\n    { gamePoint: 11, isTop: false, indexInHalf: 1, colorOffset: 1 },\r\n    { gamePoint: 10, isTop: false, indexInHalf: 2, colorOffset: 0 },\r\n    { gamePoint: 9, isTop: false, indexInHalf: 3, colorOffset: 1 },\r\n    { gamePoint: 8, isTop: false, indexInHalf: 4, colorOffset: 0 },\r\n    { gamePoint: 7, isTop: false, indexInHalf: 5, colorOffset: 1 },\r\n    // Bottom-right quadrant (points 6-1, visually from right to left)\r\n    { gamePoint: 6, isTop: false, indexInHalf: 6, colorOffset: 0 },\r\n    { gamePoint: 5, isTop: false, indexInHalf: 7, colorOffset: 1 },\r\n    { gamePoint: 4, isTop: false, indexInHalf: 8, colorOffset: 0 },\r\n    { gamePoint: 3, isTop: false, indexInHalf: 9, colorOffset: 1 },\r\n    { gamePoint: 2, isTop: false, indexInHalf: 10, colorOffset: 0 },\r\n    { gamePoint: 1, isTop: false, indexInHalf: 11, colorOffset: 1 },\r\n  ];\r\n\r\n  const halfBoardSectionWidth = boardWidth / 2;\r\n  const pointWidth = halfBoardSectionWidth / 6;\r\n\r\n  // Define board colors for SVG elements.\r\n  const boardBgColor = '#654321'; // Darker brown for main board\r\n  const pointColor1 = '#A0522D'; // Sienna\r\n  const pointColor2 = '#D2B48C'; // Tan (lighter brown)\r\n  // Replaced solid colors with patterns for leather texture\r\n  const barFill = \"url(#darkLeatherTexture)\";\r\n  const bearOffFill = \"url(#darkLeatherTexture)\";\r\n\r\n  return (\r\n    <div className=\"relative w-full aspect-[1.8/1] bg-brown-900 rounded-lg shadow-2xl overflow-hidden border-8 border-brown-950\">\r\n      <svg\r\n        viewBox={`0 0 ${boardWidth + barWidth + (bearOffAreaWidth * 2)} ${boardHeight}`} // Adjust viewBox for new areas\r\n        className=\"w-full h-full\"\r\n        preserveAspectRatio=\"xMidYMid meet\"\r\n      >\r\n        <defs>\r\n          {/* White Marble Pattern */}\r\n          <linearGradient id=\"whiteMarbleGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n            <stop offset=\"0%\" stopColor=\"#f0f0f0\" />\r\n            <stop offset=\"50%\" stopColor=\"#ffffff\" />\r\n            <stop offset=\"100%\" stopColor=\"#e0e0e0\" />\r\n          </linearGradient>\r\n          <filter id=\"whiteMarbleTexture\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\r\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.05 0.1\" numOctaves=\"2\" result=\"noise\" />\r\n            <feDisplacementMap in=\"SourceGraphic\" in2=\"noise\" scale=\"5\" xChannelSelector=\"R\" yChannelSelector=\"G\" />\r\n            <feComposite operator=\"in\" in=\"SourceGraphic\" in2=\"noise\" /> {/* Apply noise as a subtle overlay */}\r\n          </filter>\r\n\r\n          {/* Black Marble Pattern */}\r\n          <linearGradient id=\"blackMarbleGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n            <stop offset=\"0%\" stopColor=\"#202020\" />\r\n            <stop offset=\"50%\" stopColor=\"#000000\" />\r\n            <stop offset=\"100%\" stopColor=\"#303030\" />\r\n          </linearGradient>\r\n          <filter id=\"blackMarbleTexture\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\r\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.05 0.1\" numOctaves=\"2\" result=\"noise\" />\r\n            <feDisplacementMap in=\"SourceGraphic\" in2=\"noise\" scale=\"5\" xChannelSelector=\"R\" yChannelSelector=\"G\" />\r\n            <feComposite operator=\"in\" in=\"SourceGraphic\" in2=\"noise\" />\r\n          </filter>\r\n\r\n          {/* Dark Leather Texture Pattern for Bar and Bear-off Areas */}\r\n          <pattern id=\"darkLeatherTexture\" patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\r\n              <rect x=\"0\" y=\"0\" width=\"20\" height=\"20\" fill=\"#3A2A1A\"/> {/* Dark base color */}\r\n              <circle cx=\"5\" cy=\"5\" r=\"2\" fill=\"#4B3A2A\" opacity=\"0.5\"/>\r\n              <circle cx=\"15\" cy=\"15\" r=\"2\" fill=\"#4B3A2A\" opacity=\"0.5\"/>\r\n              <rect x=\"0\" y=\"10\" width=\"20\" height=\"1\" fill=\"#2B1A0A\" opacity=\"0.3\"/>\r\n          </pattern>\r\n        </defs>\r\n\r\n        {/* Board Background, shifted right to accommodate left bear-off area */}\r\n        <rect x={bearOffAreaWidth} y=\"0\" width={boardWidth + barWidth} height={boardHeight} fill={boardBgColor} />\r\n\r\n        {/* Bear-off areas (holders) */}\r\n        {/* Left bear-off area (for white checkers borne off) */}\r\n        <rect\r\n          x=\"0\" y=\"0\" width={bearOffAreaWidth} height={boardHeight}\r\n          fill={bearOffFill} stroke=\"#3d2812\" strokeWidth=\"2\"\r\n          onClick={() => onPointClick(0)} // Point 0 for white's bear-off area\r\n          className={possibleMovePoints.includes(0) && currentPlayer === 'white' ? 'stroke-lime-500 stroke-4 cursor-pointer' : ''}\r\n        />\r\n        {/* Right bear-off area (for black checkers borne off) */}\r\n        <rect\r\n          x={boardWidth + barWidth + bearOffAreaWidth} y=\"0\" width={bearOffAreaWidth} height={boardHeight}\r\n          fill={bearOffFill} stroke=\"#3d2812\" strokeWidth=\"2\"\r\n          onClick={() => onPointClick(25)} // Point 25 for black's bear-off area\r\n          className={possibleMovePoints.includes(25) && currentPlayer === 'black' ? 'stroke-lime-500 stroke-4 cursor-pointer' : ''}\r\n        />\r\n\r\n\r\n        {/* Bar in the middle of the board, shifted right */}\r\n        <rect x={halfBoardSectionWidth + bearOffAreaWidth} y=\"0\" width={barWidth} height={boardHeight} fill={barFill} stroke=\"#3d2812\" strokeWidth=\"2\" />\r\n\r\n        {/* Render points (triangles), shifted right */}\r\n        {visualPointMapping.map((pointData) => {\r\n          const { gamePoint, isTop, indexInHalf } = pointData;\r\n          const fillColor = (indexInHalf % 2 === 0) ? pointColor1 : pointColor2; // Alternate point colors.\r\n\r\n          let currentPointX;\r\n          // Calculate X position based on which half of the board the point is in.\r\n          if (indexInHalf < 6) { // First half of either top or bottom row.\r\n              currentPointX = pointWidth * indexInHalf + bearOffAreaWidth; // Shift by bear-off area width\r\n          } else { // Second half, after the bar.\r\n              currentPointX = pointWidth * indexInHalf + barWidth + bearOffAreaWidth; // Shift by bar and bear-off area width\r\n          }\r\n\r\n          // Define triangle points for top or bottom row.\r\n          const trianglePoints = isTop\r\n              ? `${currentPointX},0 ${currentPointX + pointWidth / 2},${pointHeight} ${currentPointX + pointWidth},0`\r\n              : `${currentPointX},${boardHeight} ${currentPointX + pointWidth / 2},${boardHeight - pointHeight} ${currentPointX + pointWidth},${boardHeight}`;\r\n\r\n          const isSelected = selectedPoint === gamePoint;\r\n          const isPossibleMove = possibleMovePoints.includes(gamePoint);\r\n\r\n          return (\r\n            <g key={gamePoint}>\r\n              <polygon\r\n                points={trianglePoints}\r\n                fill={fillColor}\r\n                stroke={isPossibleMove ? 'lime' : (isSelected ? 'yellow' : '#333')} // Highlight selected/possible moves.\r\n                strokeWidth={isPossibleMove || isSelected ? '4' : '1'}\r\n                className=\"hover:opacity-80 transition-opacity cursor-pointer\"\r\n                onClick={() => onPointClick(gamePoint)} // Make the point itself clickable\r\n              />\r\n              {/* Render small black arrow for possible moves */}\r\n              {isPossibleMove && gamePoint !== 0 && ( // Don't show arrow for bear-off (point 0)\r\n                <polygon\r\n                  points={\r\n                    isTop\r\n                      ? `${currentPointX + pointWidth / 2 - 8},${28} ${currentPointX + pointWidth / 2 + 8},${28} ${currentPointX + pointWidth / 2},${12}` // Upward arrow (towards top edge)\r\n                      : `${currentPointX + pointWidth / 2 - 8},${boardHeight - 28} ${currentPointX + pointWidth / 2 + 8},${boardHeight - 28} ${currentPointX + pointWidth / 2},${boardHeight - 12}` // Downward arrow (towards bottom edge)\r\n                  }\r\n                  fill=\"black\"\r\n                  stroke=\"white\" // Small white border for visibility\r\n                  strokeWidth=\"1\"\r\n                  opacity=\"0.8\"\r\n                />\r\n              )}\r\n              {/* Render checkers on each point */}\r\n              {board.points[gamePoint - 1].checkers.map((color, checkerIdx) => {\r\n                let checkerY;\r\n                const checkerCountOnPoint = board.points[gamePoint - 1].checkers.length;\r\n                // Calculate Y position for checkers, stacking them.\r\n                if (isTop) {\r\n                    checkerY = (checkerIdx * checkerRadius * 2) + checkerRadius;\r\n                } else {\r\n                    checkerY = boardHeight - checkerRadius - (checkerIdx * checkerRadius * 2);\r\n                }\r\n\r\n                // Limit visible checkers to 5 and show count for more.\r\n                if (checkerIdx >= 5) {\r\n                    if (checkerIdx === 5) {\r\n                        return (\r\n                            <text\r\n                                key={`count-${gamePoint}`}\r\n                                x={currentPointX + pointWidth / 2}\r\n                                y={isTop ? (checkerRadius * 2 * 5) + checkerRadius + 10 : boardHeight - (checkerRadius * 2 * 5) - checkerRadius - 10}\r\n                                textAnchor=\"middle\"\r\n                                dominantBaseline=\"middle\"\r\n                                fill=\"white\"\r\n                                fontSize=\"18\"\r\n                                fontWeight=\"bold\"\r\n                            >\r\n                                x{checkerCountOnPoint}\r\n                            </text>\r\n                        );\r\n                    }\r\n                    return null;\r\n                }\r\n\r\n                // Add highlighting for the current player's checkers\r\n                const isCurrentPlayerChecker = color === currentPlayer;\r\n                // Highlight color and width: black for white player, white for black player, yellow if selected\r\n                const checkerStrokeColor = isCurrentPlayerChecker\r\n                    ? (isSelected ? 'yellow' : (currentPlayer === 'white' ? 'black' : 'white'))\r\n                    : '#555';\r\n                const checkerStrokeWidth = isCurrentPlayerChecker ? (isSelected ? '3' : '3') : '1'; // Thicker border for current player\r\n\r\n                const checkerFill = color === 'white' ? 'url(#whiteMarbleGradient)' : 'url(#blackMarbleGradient)';\r\n                const checkerFilter = color === 'white' ? 'url(#whiteMarbleTexture)' : 'url(#blackMarbleTexture)';\r\n\r\n\r\n                return (\r\n                  <circle\r\n                    key={`${gamePoint}-${checkerIdx}`}\r\n                    cx={currentPointX + pointWidth / 2}\r\n                    cy={checkerY}\r\n                    r={checkerRadius}\r\n                    fill={checkerFill} // Use the gradient for fill\r\n                    filter={checkerFilter} // Apply the filter for texture\r\n                    stroke={checkerStrokeColor}\r\n                    strokeWidth={checkerStrokeWidth}\r\n                    className=\"cursor-pointer\" // Make checkers look clickable\r\n                    onClick={(e) => {\r\n                        e.stopPropagation(); // Prevent clicking through to the point if checker is clicked\r\n                        onPointClick(gamePoint);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n            </g>\r\n          );\r\n        })}\r\n\r\n        {/* Render checkers on the bar */}\r\n        {board.bar.white > 0 && (\r\n          <g>\r\n            {Array(Math.min(board.bar.white, 5)).fill(0).map((_, idx) => (\r\n              <circle\r\n                key={`bar-white-${idx}`}\r\n                cx={halfBoardSectionWidth + barWidth / 2 + bearOffAreaWidth} // Shifted by bear-off area width\r\n                cy={boardHeight / 2 - checkerRadius - (idx * checkerRadius * 2)}\r\n                r={checkerRadius}\r\n                fill=\"url(#whiteMarbleGradient)\" // Use the gradient\r\n                filter=\"url(#whiteMarbleTexture)\" // Apply the filter\r\n                stroke={currentPlayer === 'white' ? 'black' : '#555'} // Highlight if white's turn with black border\r\n                strokeWidth={currentPlayer === 'white' ? '3' : '1'} // Thicker for current player\r\n              />\r\n            ))}\r\n            {board.bar.white > 5 && (\r\n                 <text\r\n                    x={halfBoardSectionWidth + barWidth / 2 + bearOffAreaWidth}\r\n                    y={boardHeight / 2 - checkerRadius - (checkerRadius * 2 * 5) - 10}\r\n                    textAnchor=\"middle\"\r\n                    dominantBaseline=\"middle\"\r\n                    fill=\"white\"\r\n                    fontSize=\"18\"\r\n                    fontWeight=\"bold\"\r\n                >\r\n                    x{board.bar.white}\r\n                </text>\r\n            )}\r\n          </g>\r\n        )}\r\n        {board.bar.black > 0 && (\r\n          <g>\r\n            {Array(Math.min(board.bar.black, 5)).fill(0).map((_, idx) => (\r\n              <circle\r\n                key={`bar-black-${idx}`}\r\n                cx={halfBoardSectionWidth + barWidth / 2 + bearOffAreaWidth} // Shifted by bear-off area width\r\n                cy={boardHeight / 2 + checkerRadius + (idx * checkerRadius * 2)}\r\n                r={checkerRadius}\r\n                fill=\"url(#blackMarbleGradient)\" // Use the gradient\r\n                filter=\"url(#blackMarbleTexture)\" // Apply the filter\r\n                stroke={currentPlayer === 'black' ? 'white' : '#555'} // Highlight if black's turn with white border\r\n                strokeWidth={currentPlayer === 'black' ? '3' : '1'} // Thicker for current player\r\n              />\r\n            ))}\r\n            {board.bar.black > 5 && (\r\n                 <text\r\n                    x={halfBoardSectionWidth + barWidth / 2 + bearOffAreaWidth}\r\n                    y={boardHeight / 2 + checkerRadius + (checkerRadius * 2 * 5) + 10}\r\n                    textAnchor=\"middle\"\r\n                    dominantBaseline=\"middle\"\r\n                    fill=\"black\"\r\n                    fontSize=\"18\"\r\n                    fontWeight=\"bold\"\r\n                >\r\n                    x{board.bar.black}\r\n                </text>\r\n            )}\r\n          </g>\r\n        )}\r\n\r\n        {/* Render borne-off checkers in their dedicated areas */}\r\n        {board.home.white > 0 && (\r\n            <g>\r\n                {Array(board.home.white).fill(0).map((_, idx) => (\r\n                    <circle\r\n                        key={`home-white-${idx}`}\r\n                        cx={bearOffAreaWidth / 2}\r\n                        cy={boardHeight - checkerRadius - (idx * checkerRadius * 2) - 5} // Stack from bottom up\r\n                        r={checkerRadius}\r\n                        fill=\"url(#whiteMarbleGradient)\"\r\n                        filter=\"url(#whiteMarbleTexture)\"\r\n                        stroke=\"#555\"\r\n                        strokeWidth=\"1\"\r\n                    />\r\n                ))}\r\n            </g>\r\n        )}\r\n        {board.home.black > 0 && (\r\n            <g>\r\n                {Array(board.home.black).fill(0).map((_, idx) => (\r\n                    <circle\r\n                        key={`home-black-${idx}`}\r\n                        cx={boardWidth + barWidth + bearOffAreaWidth + (bearOffAreaWidth / 2)}\r\n                        cy={checkerRadius + (idx * checkerRadius * 2) + 5} // Stack from top down\r\n                        r={checkerRadius}\r\n                        fill=\"url(#blackMarbleGradient)\"\r\n                        filter=\"url(#blackMarbleTexture)\"\r\n                        stroke=\"#555\"\r\n                        strokeWidth=\"1\"\r\n                    />\r\n                ))}\r\n            </g>\r\n        )}\r\n\r\n         {/* Player Turn Indicator */}\r\n         <text\r\n            x={boardWidth / 2 + barWidth / 2 + bearOffAreaWidth} // Center horizontally, accounting for bear-off area\r\n            y={boardHeight / 2 - 55} // Shifted further up to make more space for dice\r\n            textAnchor=\"middle\"\r\n            dominantBaseline=\"middle\" // Ensures true vertical centering\r\n            fill={currentPlayer === 'white' ? 'white' : 'black'}\r\n            stroke={currentPlayer === 'white' ? 'black' : 'white'} // Added outline\r\n            strokeWidth=\"1.5\" // Outline thickness\r\n            fontSize=\"24\"\r\n            fontWeight=\"bold\"\r\n            className=\"transition-all duration-500\"\r\n         >\r\n            {currentPlayer === 'white' ? 'White\\'s Turn' : 'Black\\'s Turn'}\r\n         </text>\r\n\r\n         {/* Display Current Dice Values on the Board */}\r\n         <g>\r\n            <rect\r\n                x={halfBoardSectionWidth + bearOffAreaWidth + barWidth / 2 - 45} // Position left die, centered with 10px gap\r\n                y={boardHeight / 2 + 5}\r\n                width=\"40\"\r\n                height=\"40\"\r\n                fill=\"white\"\r\n                stroke=\"#333\"\r\n                strokeWidth=\"1\"\r\n                rx=\"5\" ry=\"5\" // Rounded corners\r\n            />\r\n            <text\r\n                x={halfBoardSectionWidth + bearOffAreaWidth + barWidth / 2 - 25} // Text for left die\r\n                y={boardHeight / 2 + 30}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n                fill=\"black\"\r\n                fontSize=\"24\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {currentDiceValues[0] || '?'}\r\n            </text>\r\n\r\n            <rect\r\n                x={halfBoardSectionWidth + bearOffAreaWidth + barWidth / 2 + 5} // Position right die, centered with 10px gap\r\n                y={boardHeight / 2 + 5}\r\n                width=\"40\"\r\n                height=\"40\"\r\n                fill=\"white\"\r\n                stroke=\"#333\"\r\n                strokeWidth=\"1\"\r\n                rx=\"5\" ry=\"5\" // Rounded corners\r\n            />\r\n            <text\r\n                x={halfBoardSectionWidth + bearOffAreaWidth + barWidth / 2 + 25} // Text for right die\r\n                y={boardHeight / 2 + 30}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n                fill=\"black\"\r\n                fontSize=\"24\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {currentDiceValues[1] || '?'}\r\n            </text>\r\n         </g>\r\n\r\n\r\n         {/* Render point numbers ON TOP (moved from inside visualPointMapping loop) */}\r\n        <g className=\"point-numbers-overlay\">\r\n            {visualPointMapping.map((pointData) => {\r\n                const { gamePoint, isTop, indexInHalf } = pointData;\r\n                let currentPointX;\r\n                if (indexInHalf < 6) {\r\n                    currentPointX = pointWidth * indexInHalf + bearOffAreaWidth;\r\n                } else {\r\n                    currentPointX = pointWidth * indexInHalf + barWidth + bearOffAreaWidth;\r\n                }\r\n                return (\r\n                    <text\r\n                        key={`num-${gamePoint}`}\r\n                        x={currentPointX + pointWidth / 2}\r\n                        y={isTop ? pointHeight + 25 : boardHeight - pointHeight - 15}\r\n                        textAnchor=\"middle\"\r\n                        dominantBaseline={isTop ? \"hanging\" : \"ideographic\"}\r\n                        fill=\"white\"\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"1\"\r\n                        fontSize=\"18\"\r\n                        fontWeight=\"bold\"\r\n                    >\r\n                        {gamePoint}\r\n                    </text>\r\n                );\r\n            })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Custom Confirmation Modal Component: Replaces native window.confirm.\r\nconst ConfirmModal = ({ message, onConfirm, onCancel }) => {\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg p-8 shadow-2xl text-center max-w-sm w-full border-t-8 border-blue-600\">\r\n                <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Confirmation</h3>\r\n                <p className=\"text-lg text-gray-700 mb-6\">{message}</p>\r\n                <div className=\"flex justify-center gap-4\">\r\n                    <button\r\n                        onClick={onConfirm}\r\n                        className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-full shadow-md transition-all duration-300 transform hover:scale-105\"\r\n                    >\r\n                        Yes\r\n                    </button>\r\n                    <button\r\n                        onClick={onCancel}\r\n                        className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-6 rounded-full shadow-md transition-all duration-300 transform hover:scale-105\"\r\n                    >\r\n                        No\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// --- Main Game Logic Component (BackgammonGame) ---\r\nconst BackgammonGame = ({ onMatchEnd }) => {\r\n  const { currentUser, userId } = useContext(AuthContext);\r\n  const [matchFormat, setMatchFormat] = useState(7); // Number of games in a match (e.g., best of 7)\r\n  const [playerScore, setPlayerScore] = useState(0);    // Current player's score in the match\r\n  const [opponentScore, setOpponentScore] = useState(0); // Opponent's score in the match\r\n  const [gameMessage, setGameMessage] = useState(\"Click 'Start Match' to begin!\"); // Messages for user guidance\r\n  const [isPlaying, setIsPlaying] = useState(false);     // Game active state\r\n  const [showModal, setShowModal] = useState(false);     // State for general info modal (e.g., match end)\r\n  const [modalMessage, setModalMessage] = useState('');   // Message for the general info modal\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false); // State for custom confirmation modal\r\n  const [confirmModalAction, setConfirmModalAction] = useState(null); // Action to run if confirmation is given\r\n\r\n  const [dice, setDice] = useState([0, 0]);             // Current dice roll values\r\n  const [availableDice, setAvailableDice] = useState([]); // Dice values that can still be used for moves\r\n  const [currentPlayer, setCurrentPlayer] = useState('white'); // 'white' or 'black' player turn\r\n  const [selectedPoint, setSelectedPoint] = useState(null); // The board point (1-24) from which a checker is selected\r\n  // Change possibleMovePoints to store objects with targetPoint and diceUsed\r\n  const [possibleMovesInfo, setPossibleMovesInfo] = useState([]); // Array of { targetPoint, diceUsed[] }\r\n  const [mustReenterFromBar, setMustReenterFromBar] = useState(false); // Flag if player has checkers on the bar\r\n  // const [soundEnabled, setSoundEnabled] = useState(true); // Sound enabled state removed\r\n  const [moveHistory, setMoveHistory] = useState([]); // Stores history of individual checker moves\r\n\r\n  // Define the custom paths for movement as per user's description\r\n  const whitePath = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13];\r\n  const blackPath = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\n\r\n  // Board State: Represents the checkers on each point, bar, and home areas.\r\n  const [boardState, setBoardState] = useState({\r\n    points: Array(24).fill(null).map(() => ({ checkers: [] })),\r\n    bar: { white: 0, black: 0 },\r\n    home: { white: 0, black: 0 },\r\n  });\r\n\r\n  // Initializes the board to the standard starting positions.\r\n  const initializeBoard = useCallback(() => {\r\n    const newPoints = Array(24).fill(null).map(() => ({ checkers: [] }));\r\n\r\n    // White player's initial positions as per user's latest precise description\r\n    newPoints[11].checkers = Array(2).fill('white');  // Point 12 (index 11)\r\n    newPoints[19].checkers = Array(3).fill('white');  // Point 20 (index 19)\r\n    newPoints[0].checkers = Array(5).fill('white');   // Point 1 (index 0)\r\n    newPoints[17].checkers = Array(5).fill('white');  // Point 18 (index 17)\r\n\r\n    // Black player's initial positions as per user's latest precise description\r\n    newPoints[6].checkers = Array(5).fill('black');   // Point 7 (index 6)\r\n    newPoints[4].checkers = Array(3).fill('black');   // Point 5 (index 4)\r\n    newPoints[23].checkers = Array(5).fill('black');  // Point 24 (index 23)\r\n    newPoints[12].checkers = Array(2).fill('black');  // Point 13 (index 12)\r\n\r\n    setBoardState({ points: newPoints, bar: { white: 0, black: 0 }, home: { white: 0, black: 0 } });\r\n  }, []);\r\n\r\n  // Helper to determine the opponent's color.\r\n  const getOpponentColor = useCallback((playerColor) => (playerColor === 'white' ? 'black' : 'opponent'), []);\r\n\r\n  // Determines if a point is blocked by the opponent (2 or more opponent checkers).\r\n  const isPointBlocked = useCallback((pointIndex, playerColor, currentBoardState = boardState) => {\r\n    const point = currentBoardState.points[pointIndex];\r\n    if (!point || point.checkers.length === 0) return false; // Point is empty or no checkers.\r\n    const opponentColor = getOpponentColor(playerColor);\r\n    return point.checkers[0] === opponentColor && point.checkers.length >= 2;\r\n  }, [getOpponentColor, boardState]);\r\n\r\n  // Checks if all of a player's checkers are in their home board.\r\n  const areAllCheckersInHomeBoard = useCallback((playerColor, currentBoardState = boardState) => {\r\n    const totalCheckers = 15;\r\n    let checkersBorneOff = currentBoardState.home[playerColor];\r\n    let checkersInHomeQuadrantOnBoard = 0;\r\n\r\n    const isWhite = playerColor === 'white';\r\n    // The home points are the last 6 points in their respective paths\r\n    // For white, these are [6, 5, 4, 3, 2, 1]\r\n    // For black, these are [19, 20, 21, 22, 23, 24]\r\n    const homePointsForBearingOff = isWhite ? [6, 5, 4, 3, 2, 1] : [19, 20, 21, 22, 23, 24];\r\n\r\n    // If checkers are on the bar, they are not yet in the home board, so bearing off is not possible.\r\n    if (currentBoardState.bar[playerColor] > 0) {\r\n        return false;\r\n    }\r\n\r\n    // Iterate through all 24 board points\r\n    for (let i = 0; i < 24; i++) {\r\n        const gamePoint = i + 1;\r\n        const checkersOnCurrentPoint = currentBoardState.points[i].checkers.filter(c => c === playerColor).length;\r\n\r\n        if (checkersOnCurrentPoint > 0) {\r\n            // If any checker of the current player is on a point *not* in their home bearing-off region,\r\n            // then not all checkers are in the home board.\r\n            if (!homePointsForBearingOff.includes(gamePoint)) {\r\n                return false;\r\n            } else {\r\n                checkersInHomeQuadrantOnBoard += checkersOnCurrentPoint;\r\n            }\r\n        }\r\n    }\r\n\r\n    // All checkers are considered \"home\" if total checkers (borne off + on home board points) equals 15.\r\n    return (checkersBorneOff + checkersInHomeQuadrantOnBoard) === totalCheckers;\r\n  }, [boardState]); // Removed whitePath, blackPath from here as homePointsForBearingOff is hardcoded\r\n\r\n  // Helper function to check if any moves are possible with given state and dice\r\n  const checkIfAnyPossibleMoves = useCallback((currentBoardState, player, currentDice) => {\r\n    const isWhite = player === 'white';\r\n    const playerPath = isWhite ? whitePath : blackPath; // Accessing whitePath, blackPath from outer scope\r\n\r\n    // Check for bar re-entry moves first\r\n    if (currentBoardState.bar[player] > 0) {\r\n        for (const die of currentDice) {\r\n            let targetGamePoint;\r\n            if (isWhite) {\r\n                targetGamePoint = die;      // White re-enters on points 1-6\r\n            } else {\r\n                targetGamePoint = 18 + die; // Black re-enters on points 19-24\r\n            }\r\n            const targetPointIndex = targetGamePoint - 1;\r\n            if (targetPointIndex >= 0 && targetPointIndex < 24 && !isPointBlocked(targetPointIndex, player, currentBoardState)) {\r\n                return true; // Found a possible bar re-entry move\r\n            }\r\n        }\r\n        return false; // No possible bar re-entry moves\r\n    }\r\n\r\n    // If no checkers on bar, check for moves from the board\r\n    for (let i = 0; i < 24; i++) {\r\n        const currentPointCheckers = currentBoardState.points[i].checkers;\r\n        if (currentPointCheckers.length > 0 && currentPointCheckers[0] === player) {\r\n            const fromPoint = i + 1;\r\n            const fromPointIndexInPath = playerPath.indexOf(fromPoint);\r\n            if (fromPointIndexInPath === -1) {\r\n                continue; // This checker is not on the player's active path (shouldn't happen with correct setup)\r\n            }\r\n\r\n            for (const die of currentDice) {\r\n                let targetPathIndex = fromPointIndexInPath + die;\r\n\r\n                if (targetPathIndex >= playerPath.length) { // Potential bearing off\r\n                    if (areAllCheckersInHomeBoard(player, currentBoardState)) {\r\n                        let noCheckersEarlierInPath = true;\r\n                        // Check if any checkers are on a point further away than 'fromPoint' in the bearing off quadrant\r\n                        const homePoints = isWhite ? [6, 5, 4, 3, 2, 1] : [19, 20, 21, 22, 23, 24];\r\n                        const fromPointHomeIndex = homePoints.indexOf(fromPoint); // Index within home points (0-5)\r\n                        if (fromPointHomeIndex !== -1) { // Only check if current checker is in home board\r\n                            for (let k = 0; k < fromPointHomeIndex; k++) { // Check points \"closer\" to bearing off\r\n                                const furtherPointOnBoard = homePoints[k]; // These are points with higher value for white, lower for black\r\n                                if (currentBoardState.points[furtherPointOnBoard - 1].checkers.includes(player)) {\r\n                                    noCheckersEarlierInPath = false; // Found a checker further away (i.e. \"earlier\" in path)\r\n                                    break;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            noCheckersEarlierInPath = false; // Checker is not even in home board, so can't bear off\r\n                        }\r\n\r\n                        // Special rule: if die is exact match for point OR die is larger than any point in home board\r\n                        // AND all other checkers are on points closer to bear-off\r\n                        const dieCanOvershoot = die >= (isWhite ? fromPoint : (25 - fromPoint));\r\n\r\n                        if (noCheckersEarlierInPath) {\r\n                             // If die exactly matches the point, or it overshoots and this is the highest point\r\n                            if ( (isWhite && fromPoint === die) || (!isWhite && (25 - fromPoint) === die) ) {\r\n                                return true; // Exact bear off\r\n                            }\r\n                            // Overshoot rule: if die is larger than current point AND this is the furthest checker\r\n                            if (dieCanOvershoot) {\r\n                                let isFurthestChecker = true;\r\n                                for (let k = 0; k < 24; k++) {\r\n                                    if (currentBoardState.points[k].checkers.includes(player)) {\r\n                                        if (isWhite && k + 1 > fromPoint) { // White: if a checker is on a point higher than 'fromPoint'\r\n                                            isFurthestChecker = false;\r\n                                            break;\r\n                                        }\r\n                                        if (!isWhite && k + 1 < fromPoint) { // Black: if a checker is on a point lower than 'fromPoint'\r\n                                            isFurthestChecker = false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (isFurthestChecker) {\r\n                                    return true; // Overshoot bear off\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else { // Regular move on board\r\n                    const targetGamePoint = playerPath[targetPathIndex];\r\n                    if (targetGamePoint >= 1 && targetGamePoint <= 24) {\r\n                        if (!isPointBlocked(targetGamePoint - 1, player, currentBoardState)) {\r\n                            return true; // Found a possible regular move\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false; // No possible moves found\r\n  }, [isPointBlocked, areAllCheckersInHomeBoard, whitePath, blackPath]); // Added dependencies\r\n\r\n  // Calculates all possible moves for a checker from a given `fromPoint` with `currentDice`.\r\n  // Returns an array of objects: { targetPoint: number, diceUsed: number[] }\r\n  const calculatePossibleMoves = useCallback((fromPoint, currentDice, playerColor, board) => {\r\n      const moves = []; // Will store objects: { targetPoint, diceUsed[] }\r\n      const isWhite = playerColor === 'white';\r\n      const playerPath = isWhite ? whitePath : blackPath;\r\n\r\n      // Helper for single step move validation and target determination\r\n      const checkSingleStepLogic = (startPoint, startPathIndex, die, tempBoard, playerColor, isInitialFromBar = false) => {\r\n          let targetGamePoint = null; // Default to null for invalid/no move\r\n          let isValid = false;\r\n          let isBearingOff = false;\r\n\r\n          // If moving from bar, target calculation is direct based on die roll\r\n          if (isInitialFromBar && startPoint === 'bar') {\r\n              if (isWhite) {\r\n                  targetGamePoint = die; // White re-enters on points 1-6\r\n              } else {\r\n                  targetGamePoint = 18 + die; // Black re-enters on points 19-24\r\n              }\r\n              const targetPointIndex = targetGamePoint - 1;\r\n              if (targetPointIndex >= 0 && targetPointIndex < 24 && !isPointBlocked(targetPointIndex, playerColor, tempBoard)) {\r\n                  isValid = true;\r\n              }\r\n              return { targetGamePoint, isValid, isBearingOff: false };\r\n          }\r\n\r\n          // If moving from board point\r\n          const targetPathIndex = startPathIndex + die;\r\n\r\n          if (targetPathIndex >= playerPath.length) { // Potential bearing off\r\n              isBearingOff = true;\r\n              if (areAllCheckersInHomeBoard(playerColor, tempBoard)) {\r\n                  // Check overshoot rule: no checkers should be on points further away from the bear-off area\r\n                  let noCheckersFurtherAway = true;\r\n                  const homePoints = isWhite ? [6, 5, 4, 3, 2, 1] : [19, 20, 21, 22, 23, 24];\r\n                  const fromPointHomeIndex = homePoints.indexOf(startPoint);\r\n\r\n                  if (fromPointHomeIndex !== -1) {\r\n                      for (let i = 0; i < fromPointHomeIndex; i++) { // Check points \"further\" in the path (closer to start of home board)\r\n                          const furtherPoint = homePoints[i];\r\n                          if (tempBoard.points[furtherPoint - 1].checkers.includes(playerColor)) {\r\n                              noCheckersFurtherAway = false;\r\n                              break;\r\n                          }\r\n                      }\r\n                  } else {\r\n                      // Checker is not in the home board at all, so cannot bear off\r\n                      noCheckersFurtherAway = false;\r\n                  }\r\n\r\n                  if (noCheckersFurtherAway) {\r\n                       // If die matches the point exactly or is greater than the distance to bear off (overshoot)\r\n                       const distanceToBearOff = isWhite ? startPoint : (25 - startPoint); // How many pips needed to bear off this checker\r\n                       if (die === distanceToBearOff || (die > distanceToBearOff && noCheckersFurtherAway)) {\r\n                           targetGamePoint = isWhite ? 0 : 25; // Special value for white/black bear-off\r\n                           isValid = true;\r\n                       }\r\n                  }\r\n              }\r\n          } else { // Regular move on board\r\n              const actualTargetGamePoint = playerPath[targetPathIndex];\r\n              if (actualTargetGamePoint >= 1 && actualTargetGamePoint <= 24) {\r\n                  if (!isPointBlocked(actualTargetGamePoint - 1, playerColor, tempBoard)) {\r\n                      targetGamePoint = actualTargetGamePoint;\r\n                      isValid = true;\r\n                  }\r\n              }\r\n          }\r\n          return { targetGamePoint, isValid, isBearingOff };\r\n      };\r\n\r\n      // 1. Bar re-entry moves (if applicable)\r\n      if (mustReenterFromBar && fromPoint === 'bar') {\r\n          currentDice.forEach(die => {\r\n              const { targetGamePoint, isValid } = checkSingleStepLogic('bar', -1, die, board, playerColor, true); // -1 for path index as it's from bar\r\n              if (isValid) {\r\n                  moves.push({ targetPoint: targetGamePoint, diceUsed: [die] });\r\n              }\r\n          });\r\n          // After considering bar re-entry, no other moves are possible from the board\r\n          // So, if we are in mustReenterFromBar state and selected point is 'bar', return these moves.\r\n          return moves;\r\n      }\r\n\r\n      // If not from bar, ensure fromPoint is a valid board point and has current player's checker\r\n      if (fromPoint === 'bar' || !board.points[fromPoint - 1] || board.points[fromPoint - 1].checkers[0] !== playerColor) {\r\n        return []; // Invalid starting point for a board move\r\n      }\r\n\r\n      const fromPointIndexInPath = playerPath.indexOf(fromPoint);\r\n      if (fromPointIndexInPath === -1) {\r\n          return []; // Should not happen for a valid checker on the board\r\n      }\r\n\r\n      // Recursive helper to find all possible move combinations\r\n      const findAllMoves = (currentFromPoint, currentFromPathIndex, remainingDice, currentBoard, pathDice) => {\r\n          if (remainingDice.length === 0) {\r\n              return; // No more dice to use\r\n          }\r\n\r\n          const uniqueDiceConsidered = new Set();\r\n          // Sort remaining dice to ensure consistent ordering for unique path generation\r\n          const sortedRemainingDice = [...remainingDice].sort((a,b) => a-b);\r\n\r\n          sortedRemainingDice.forEach((d1, originalIdx) => {\r\n              // Create a temporary array to simulate removing this specific die instance\r\n              const tempRemainingDice = [...sortedRemainingDice];\r\n              const actualIdx = tempRemainingDice.indexOf(d1); // Find index of the first occurrence of this die\r\n              if (actualIdx > -1) {\r\n                tempRemainingDice.splice(actualIdx, 1);\r\n              } else {\r\n                  return; // Should not happen\r\n              }\r\n\r\n              const tempBoardAfterD1 = JSON.parse(JSON.stringify(currentBoard));\r\n              let checkerSuccessfullyMovedInTemp = true;\r\n\r\n              // Hypothetically remove checker from source point for the first step\r\n              if (currentFromPoint === 'bar') {\r\n                  if (tempBoardAfterD1.bar[playerColor] === 0) { checkerSuccessfullyMovedInTemp = false; }\r\n                  else { tempBoardAfterD1.bar[playerColor]--; }\r\n              } else {\r\n                  if (!tempBoardAfterD1.points[currentFromPoint - 1] || tempBoardAfterD1.points[currentFromPoint - 1].checkers.length === 0 || tempBoardAfterD1.points[currentFromPoint - 1].checkers[0] !== playerColor) {\r\n                      checkerSuccessfullyMovedInTemp = false;\r\n                  } else {\r\n                      tempBoardAfterD1.points[currentFromPoint - 1].checkers.pop();\r\n                  }\r\n              }\r\n\r\n              if (!checkerSuccessfullyMovedInTemp) return;\r\n\r\n              const { targetGamePoint: intermediatePoint, isValid: isValidIntermediate, isBearingOff: isIntermedBearOff } =\r\n                  checkSingleStepLogic(currentFromPoint, currentFromPathIndex, d1, tempBoardAfterD1, playerColor);\r\n\r\n              if (isValidIntermediate) {\r\n                  if (!isIntermedBearOff) { // If not bearing off in intermediate step\r\n                      if (tempBoardAfterD1.points[intermediatePoint - 1].checkers.length === 1 && tempBoardAfterD1.points[intermediatePoint - 1].checkers[0] === getOpponentColor(playerColor)) {\r\n                          tempBoardAfterD1.points[intermediatePoint - 1].checkers.pop();\r\n                          tempBoardAfterD1.bar[getOpponentColor(playerColor)]++;\r\n                      }\r\n                      // Check for block *after* hitting blot (if it's not a blot, it's just a regular move onto an empty or friendly point)\r\n                      if (isPointBlocked(intermediatePoint - 1, playerColor, tempBoardAfterD1)) {\r\n                          return; // This intermediate point is blocked, so this path is invalid.\r\n                      }\r\n                      tempBoardAfterD1.points[intermediatePoint - 1].checkers.push(playerColor);\r\n                  }\r\n\r\n                  const currentPathDice = [...pathDice, d1];\r\n                  moves.push({ targetPoint: intermediatePoint, diceUsed: currentPathDice.sort((a,b)=>a-b) });\r\n\r\n                  // Recurse with remaining dice from the intermediate point\r\n                  const intermediatePointPathIndex = isIntermedBearOff ? playerPath.length : playerPath.indexOf(intermediatePoint);\r\n                  if (intermediatePointPathIndex !== -1 && tempRemainingDice.length > 0) {\r\n                      findAllMoves(intermediatePoint, intermediatePointPathIndex, tempRemainingDice, tempBoardAfterD1, currentPathDice);\r\n                  }\r\n              }\r\n          });\r\n      };\r\n\r\n      findAllMoves(fromPoint, fromPointIndexInPath, currentDice, board, []);\r\n\r\n      // Filter for unique target points and prioritize paths with fewer dice or higher sum\r\n      const uniqueMovesMap = new Map(); // targetPoint -> { targetPoint, diceUsed }\r\n      moves.forEach(move => {\r\n          const key = move.targetPoint; // Using target point as the unique key\r\n          // Create a canonical representation of diceUsed for comparison (sorted string)\r\n          const currentDiceUsedStr = move.diceUsed.sort((a, b) => a - b).join(',');\r\n\r\n          if (!uniqueMovesMap.has(key)) {\r\n              uniqueMovesMap.set(key, move);\r\n          } else {\r\n              const existingMove = uniqueMovesMap.get(key);\r\n              const existingDiceUsedStr = existingMove.diceUsed.sort((a, b) => a - b).join(',');\r\n\r\n              // If the dice used are different for the same target, add it as a separate option\r\n              if (currentDiceUsedStr !== existingDiceUsedStr) {\r\n                  // This scenario means we might have two paths to the same point with different dice combos.\r\n                  // For now, we'll keep the one that was added first, or apply a specific priority.\r\n                  // Current implementation prioritizes earlier found moves if key exists,\r\n                  // or if it's strictly better (fewer dice or higher sum for same # dice).\r\n                  if (move.diceUsed.length < existingMove.diceUsed.length) {\r\n                      uniqueMovesMap.set(key, move);\r\n                  } else if (move.diceUsed.length === existingMove.diceUsed.length) {\r\n                      const sumCurrent = move.diceUsed.reduce((sum, d) => sum + d, 0);\r\n                      const sumExisting = existingMove.diceUsed.reduce((sum, d) => sum + d, 0);\r\n                      if (sumCurrent > sumExisting) {\r\n                          uniqueMovesMap.set(key, move);\r\n                      }\r\n                  }\r\n              }\r\n              // If diceUsed is the same, no need to add duplicate.\r\n          }\r\n      });\r\n\r\n\r\n      return Array.from(uniqueMovesMap.values()); // Return objects with target and dice used.\r\n  }, [mustReenterFromBar, areAllCheckersInHomeBoard, isPointBlocked, whitePath, blackPath, getOpponentColor]);\r\n\r\n  // Ends the entire match and updates user statistics in Firebase.\r\n  const endMatch = useCallback((playerWon) => {\r\n    setIsPlaying(false);\r\n    const winnerGames = playerWon ? playerScore : opponentScore;\r\n    const loserGames = playerWon ? opponentScore : playerScore;\r\n\r\n    setModalMessage(`Match Over! You ${playerWon ? 'won' : 'lost'} the best of ${matchFormat} match (${winnerGames}-${loserGames}).`);\r\n    setShowModal(true);\r\n\r\n    if (currentUser && !currentUser.isAnonymous) {\r\n      // Prepare match result data for saving.\r\n      const matchResult = {\r\n        player1Id: userId,\r\n        player1DisplayName: currentUser.displayName || 'You',\r\n        player2Id: 'AI_Opponent', // Assuming single-player vs AI.\r\n        player2DisplayName: 'AI Opponent',\r\n        winnerId: playerWon ? userId : 'AI_Opponent',\r\n        loserId: playerWon ? 'AI_Opponent' : userId,\r\n        matchFormat: matchFormat,\r\n        player1GamesWon: playerScore,\r\n        player2GamesWon: opponentScore,\r\n      };\r\n\r\n      FirestoreService.saveMatchResult(matchResult); // Save match to Firestore.\r\n\r\n      // Prepare user statistics update.\r\n      const userStatsUpdate = {\r\n        totalGamesPlayed: (currentUser.totalGamesPlayed || 0) + 1, // Count matches as \"games played\" for overall stats.\r\n        totalMatchesWon: (currentUser.totalMatchesWon || 0) + (playerWon ? 1 : 0),\r\n        totalMatchesLost: (currentUser.totalMatchesLost || 0) + (playerWon ? 0 : 1),\r\n        totalGamesWon: (currentUser.totalGamesWon || 0) + playerScore, // Total games won across all matches.\r\n        totalGamesLost: (currentUser.totalGamesLost || 0) + opponentScore, // Total games lost across all matches.\r\n      };\r\n      const newTotalMatches = userStatsUpdate.totalMatchesWon + userStatsUpdate.totalMatchesLost;\r\n      userStatsUpdate.winLossRatio = newTotalMatches > 0\r\n        ? (userStatsUpdate.totalMatchesWon / newTotalMatches).toFixed(3)\r\n        : 0;\r\n\r\n      FirestoreService.updateUserStats(userId, userStatsUpdate); // Update user stats in Firestore.\r\n    }\r\n    onMatchEnd(); // Callback to parent component (App) to navigate to stats page.\r\n  }, [currentUser, matchFormat, opponentScore, playerScore, userId, onMatchEnd]);\r\n\r\n  // Ends the current player's turn, checking for game win and switching players.\r\n  const endTurn = useCallback(() => {\r\n    if (!isPlaying) return;\r\n\r\n    // Check for current game winner (15 checkers borne off).\r\n    if (boardState.home.white === 15) {\r\n        setModalMessage(`White wins this game!`);\r\n        setShowModal(true);\r\n        setPlayerScore(prev => prev + 1); // Increment match score.\r\n        initializeBoard(); // Reset board for next game.\r\n        setDice([0, 0]);\r\n        setAvailableDice([]);\r\n        setSelectedPoint(null);\r\n        setPossibleMovesInfo([]); // Clear possible moves info\r\n        setMustReenterFromBar(false);\r\n        setCurrentPlayer('white'); // White always starts the next game.\r\n        setGameMessage(\"New game started. White to roll.\");\r\n        setMoveHistory([]); // Clear history for new game/turn\r\n        return;\r\n    } else if (boardState.home.black === 15) {\r\n        setModalMessage(`Black wins this game!`);\r\n        setShowModal(true);\r\n        setOpponentScore(prev => prev + 1);\r\n        initializeBoard();\r\n        setDice([0, 0]);\r\n        setAvailableDice([]);\r\n        setSelectedPoint(null);\r\n        setPossibleMovesInfo([]); // Clear possible moves info\r\n        setMustReenterFromBar(false);\r\n        setCurrentPlayer('black'); // Black starts the next game.\r\n        setGameMessage(\"New game started. Black to roll.\");\r\n        setMoveHistory([]); // Clear history for new game/turn\r\n        return;\r\n    }\r\n\r\n    // If no game winner, switch to the other player's turn.\r\n    setCurrentPlayer(prev => prev === 'white' ? 'black' : 'white');\r\n    setDice([0, 0]);\r\n    setAvailableDice([]); // Clear dice for the next turn.\r\n    setSelectedPoint(null);\r\n    setPossibleMovesInfo([]); // Clear possible moves info\r\n    setMustReenterFromBar(false); // Reset bar state for the next turn.\r\n    setGameMessage(`Turn ended. It's now ${getOpponentColor(currentPlayer).charAt(0).toUpperCase() + getOpponentColor(currentPlayer).slice(1)}'s turn. Roll the dice!`);\r\n    setMoveHistory([]); // Clear history for the new turn\r\n  }, [isPlaying, boardState.home.white, boardState.home.black, initializeBoard, currentPlayer, getOpponentColor, endMatch]);\r\n\r\n\r\n  // Performs a checker move on the board.\r\n  // diceToConsume is now an array of numbers, e.g., [4], [2, 4], [3, 3, 3]\r\n  const performMove = useCallback((fromPoint, toPoint, diceToConsume) => {\r\n    const newBoardState = JSON.parse(JSON.stringify(boardState)); // Deep copy to ensure immutability.\r\n\r\n    let checkerToMove;\r\n    if (fromPoint === 'bar') {\r\n        // Move from the bar.\r\n        if (newBoardState.bar[currentPlayer] > 0) {\r\n            newBoardState.bar[currentPlayer]--;\r\n            checkerToMove = currentPlayer;\r\n        } else {\r\n            console.error(\"No checkers on bar to move!\");\r\n            setGameMessage(\"Error: No checkers on bar to move!\");\r\n            return;\r\n        }\r\n    } else {\r\n        // Move from a regular point.\r\n        const sourcePoint = newBoardState.points[fromPoint - 1];\r\n        if (sourcePoint.checkers.length === 0 || sourcePoint.checkers[0] !== currentPlayer) {\r\n            console.error(\"Invalid move: No checker of current player at source point.\");\r\n            setGameMessage(\"Error: No checker of current player at source point.\");\r\n            return;\r\n        }\r\n        checkerToMove = sourcePoint.checkers.pop(); // Remove checker from source.\r\n    }\r\n\r\n    // Determine if a blot was hit BEFORE modifying newBoardState\r\n    let hitOpponentChecker = false;\r\n    let hitCheckerColor = null;\r\n\r\n    // Point 0 is white's bear-off, Point 25 is black's bear-off\r\n    const isBearingOff = (toPoint === 0 || toPoint === 25);\r\n\r\n    if (!isBearingOff && newBoardState.points[toPoint - 1].checkers.length === 1 && newBoardState.points[toPoint - 1].checkers[0] === getOpponentColor(currentPlayer)) {\r\n        hitOpponentChecker = true;\r\n        hitCheckerColor = getOpponentColor(currentPlayer); // The color of the checker that was hit\r\n    }\r\n\r\n    // Handle bearing off (moving to point 0 or 25).\r\n    if (isBearingOff) {\r\n        if (toPoint === 0) { // White bearing off\r\n            newBoardState.home.white++;\r\n        } else { // Black bearing off (toPoint === 25)\r\n            newBoardState.home.black++;\r\n        }\r\n        setBoardState(newBoardState);\r\n        setGameMessage(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} checker borne off!`);\r\n        setSelectedPoint(null); // Deselect.\r\n\r\n        // Consume the used dice.\r\n        let newAvailableDice = [...availableDice];\r\n        diceToConsume.forEach(die => {\r\n            const index = newAvailableDice.indexOf(die);\r\n            if (index > -1) {\r\n                newAvailableDice.splice(index, 1);\r\n            } else {\r\n                console.warn(`Attempted to consume die ${die} but it was not found in available dice:`, newAvailableDice);\r\n            }\r\n        });\r\n        setAvailableDice(newAvailableDice);\r\n        setPossibleMovesInfo([]); // Clear possible moves info\r\n\r\n        // Record the move in history\r\n        setMoveHistory(prevHistory => [...prevHistory, {\r\n            fromPoint,\r\n            toPoint,\r\n            checkerColor: currentPlayer,\r\n            hitOpponentChecker: false, // Bearing off never hits opponent\r\n            hitCheckerColor: null,\r\n            usedDice: diceToConsume // Store the array of dice used\r\n        }]);\r\n\r\n        // Check for immediate game win after bearing off.\r\n        if (newBoardState.home.white === 15 || newBoardState.home.black === 15) {\r\n            endTurn();\r\n        } else {\r\n            // Check if any further moves are possible with the remaining dice and updated board state\r\n            const hasMoreMoves = checkIfAnyPossibleMoves(newBoardState, currentPlayer, newAvailableDice);\r\n            if (newAvailableDice.length === 0 || !hasMoreMoves) {\r\n                setTimeout(endTurn, 1000); // Add a small delay for message visibility\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    // If a blot was hit, move opponent's checker to the bar. This happens before adding current player's checker.\r\n    if (hitOpponentChecker) {\r\n      newBoardState.points[toPoint - 1].checkers.pop(); // Remove opponent's checker.\r\n      newBoardState.bar[hitCheckerColor]++; // Send it to the opponent's bar.\r\n      setGameMessage(`Blot hit! ${hitCheckerColor.charAt(0).toUpperCase() + hitCheckerColor.slice(1)} checker sent to the bar.`);\r\n    }\r\n\r\n    newBoardState.points[toPoint - 1].checkers.push(checkerToMove); // Add current player's checker to destination.\r\n    setBoardState(newBoardState);\r\n    setSelectedPoint(null);\r\n    setGameMessage(\"Move made!\");\r\n\r\n    // Record the move in history\r\n    setMoveHistory(prevHistory => [...prevHistory, {\r\n        fromPoint,\r\n        toPoint,\r\n        checkerColor: currentPlayer,\r\n        hitOpponentChecker,\r\n        hitCheckerColor,\r\n        usedDice: diceToConsume // Store the array of dice used\r\n    }]);\r\n\r\n    // Consume the used dice after the move.\r\n    let newAvailableDice = [...availableDice];\r\n    diceToConsume.forEach(die => {\r\n        const index = newAvailableDice.indexOf(die);\r\n        if (index > -1) {\r\n            newAvailableDice.splice(index, 1);\r\n        } else {\r\n                console.warn(`Attempted to consume die ${die} but it was not found in available dice:`, newAvailableDice);\r\n            }\r\n        });\r\n        setAvailableDice(newAvailableDice);\r\n        setPossibleMovesInfo([]); // Clear possible moves info\r\n\r\n        // If no more dice are available after this move, or no more moves possible, automatically end the turn.\r\n        const hasMoreMoves = checkIfAnyPossibleMoves(newBoardState, currentPlayer, newAvailableDice);\r\n        if (newAvailableDice.length === 0 || !hasMoreMoves) {\r\n            setTimeout(endTurn, 1000); // Add a small delay for message visibility\r\n        }\r\n\r\n    }, [boardState, availableDice, currentPlayer, endTurn, getOpponentColor, checkIfAnyPossibleMoves, setMoveHistory]); // Removed whitePath, blackPath from dependencies as they're not direct args\r\n\r\n    // Handles rolling the dice. This function is passed to the Dice component as a callback.\r\n    const rollDiceHandler = useCallback((die1, die2) => { // Now accepts die values as arguments\r\n        if (!isPlaying) return;\r\n        const newAvailableDice = die1 === die2 ? [die1, die1, die1, die1] : [die1, die2];\r\n        setAvailableDice(newAvailableDice);\r\n        setGameMessage(`${currentPlayer === 'white' ? (currentUser?.displayName || 'White Player') : 'Black Player'} rolled a ${die1} and a ${die2}. Now make your move.`);\r\n        setSelectedPoint(null);\r\n        setPossibleMovesInfo([]); // Clear possible moves info.\r\n        setMoveHistory([]); // Clear move history at the start of a new roll/turn\r\n\r\n        // Check if any moves are possible with the new dice and current board state\r\n        const initialPossibleMoves = checkIfAnyPossibleMoves(boardState, currentPlayer, newAvailableDice);\r\n\r\n        if (boardState.bar[currentPlayer] > 0 && !initialPossibleMoves) {\r\n            // If player has pieces on the bar AND cannot re-enter, skip turn.\r\n            setGameMessage(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} has checkers on the bar and no valid moves. Turn skipped.`);\r\n            setTimeout(endTurn, 2000); // Give player time to read message\r\n            return; // Important: exit here to prevent normal turn flow\r\n        } else if (!initialPossibleMoves) {\r\n            // Normal case: no moves possible, but no checkers on bar\r\n            setGameMessage(`No possible moves for ${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} with these dice. Turn ends.`);\r\n            setTimeout(endTurn, 1500); // Give player a moment to read message\r\n        }\r\n    }, [isPlaying, currentPlayer, currentUser, checkIfAnyPossibleMoves, boardState, endTurn, setMoveHistory]); // Removed whitePath, blackPath from dependencies as they're not direct args\r\n\r\n\r\n    // Starts a new backgammon match.\r\n    const startMatch = () => {\r\n        setPlayerScore(0);\r\n        setOpponentScore(0);\r\n        setGameMessage(`Match started! First to ${Math.ceil(matchFormat / 2)} games wins. White rolls first!`);\r\n        setIsPlaying(true);\r\n        setDice([0,0]);\r\n        setAvailableDice([]);\r\n        setCurrentPlayer('white');\r\n        initializeBoard(); // Reset board to initial state.\r\n        setSelectedPoint(null);\r\n        setPossibleMovesInfo([]); // Clear possible moves info\r\n        setMustReenterFromBar(false);\r\n        setMoveHistory([]); // Clear history at match start\r\n    };\r\n\r\n    // Closes the general info modal.\r\n    const closeModal = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    const undoLastMove = useCallback(() => {\r\n        if (moveHistory.length === 0) {\r\n            setGameMessage(\"No moves to undo!\");\r\n            return;\r\n        }\r\n\r\n        const lastMove = moveHistory[moveHistory.length - 1];\r\n        const newMoveHistory = moveHistory.slice(0, -1); // Remove the last move\r\n        setMoveHistory(newMoveHistory);\r\n\r\n        const newBoardState = JSON.parse(JSON.stringify(boardState));\r\n\r\n        // Determine if it was a bearing off move\r\n        const isBearingOffMove = (lastMove.toPoint === 0 || lastMove.toPoint === 25);\r\n\r\n        // 1. Move checker back\r\n        if (isBearingOffMove) {\r\n            if (lastMove.toPoint === 0) { // White bearing off\r\n                newBoardState.home.white--;\r\n            } else { // Black bearing off\r\n                newBoardState.home.black--;\r\n            }\r\n            // Place checker back on its original 'fromPoint'\r\n            newBoardState.points[lastMove.fromPoint - 1].checkers.push(lastMove.checkerColor);\r\n        } else {\r\n            // Regular move: move checker from 'toPoint' back to 'fromPoint'\r\n            if (!newBoardState.points[lastMove.toPoint - 1] || newBoardState.points[lastMove.toPoint - 1].checkers.length === 0 ||\r\n                newBoardState.points[lastMove.toPoint - 1].checkers[newBoardState.points[lastMove.toPoint - 1].checkers.length - 1] !== lastMove.checkerColor) {\r\n                console.error(\"Error during undo: No checker of correct color at toPoint to move back.\");\r\n                setGameMessage(\"Error undoing move. Please restart game if issues persist.\");\r\n                return;\r\n            }\r\n            newBoardState.points[lastMove.toPoint - 1].checkers.pop(); // Remove from destination\r\n            // Handle move from bar\r\n            if (lastMove.fromPoint === 'bar') {\r\n                newBoardState.bar[lastMove.checkerColor]++;\r\n            } else {\r\n                newBoardState.points[lastMove.fromPoint - 1].checkers.push(lastMove.checkerColor); // Return to original point\r\n            }\r\n        }\r\n\r\n        // 2. If a blot was hit, move opponent's checker back from the bar\r\n        if (lastMove.hitOpponentChecker && lastMove.hitCheckerColor) {\r\n            newBoardState.bar[lastMove.hitCheckerColor]--;\r\n            // For a blot, the opponent's checker was sent to the bar FROM `lastMove.toPoint`\r\n            if (lastMove.toPoint !== 0 && lastMove.toPoint !== 25) { // Ensure it wasn't a bear-off point itself\r\n                newBoardState.points[lastMove.toPoint - 1].checkers.push(lastMove.hitCheckerColor); // Put opponent's checker back\r\n            }\r\n        }\r\n\r\n        setBoardState(newBoardState);\r\n\r\n        // 3. Refund the dice used in the last move\r\n        setAvailableDice(prevDice => {\r\n            let tempDice = [...prevDice];\r\n            lastMove.usedDice.forEach(die => {\r\n                tempDice.push(die); // Add each die back\r\n            });\r\n            return tempDice.sort((a, b) => b - a); // Sort for consistent display (descending)\r\n        });\r\n\r\n\r\n        // Clear selection and possible moves after undo\r\n        setSelectedPoint(null);\r\n        setPossibleMovesInfo([]);\r\n        setGameMessage(`Last move undone.`);\r\n\r\n        // Re-evaluate if re-entry from bar is needed after undo\r\n        // Important: recalculate based on the *new* board state after undo\r\n        if (newBoardState.bar[currentPlayer] > 0) {\r\n            setMustReenterFromBar(true);\r\n            // The available dice for recalculation should include the refunded dice\r\n            const updatedAvailableDice = [...availableDice, ...lastMove.usedDice]; // This may not be perfectly accurate if availableDice was already modified for other parts of the turn.\r\n            // For true robustness, a full state snapshot per move is ideal.\r\n            // For now, this assumes undoing to a point where the only available dice are what's remaining + refunded from this move.\r\n            const availableEntryMoves = calculatePossibleMoves('bar', updatedAvailableDice, currentPlayer, newBoardState);\r\n            setPossibleMovesInfo(availableEntryMoves);\r\n        } else {\r\n            setMustReenterFromBar(false);\r\n        }\r\n\r\n    }, [moveHistory, boardState, availableDice, currentPlayer, getOpponentColor, isPointBlocked, setAvailableDice, setSelectedPoint, setPossibleMovesInfo, setGameMessage, setMustReenterFromBar, calculatePossibleMoves]);\r\n\r\n\r\n    // Effect to initialize the board on component mount or `initializeBoard` change.\r\n    useEffect(() => {\r\n        initializeBoard();\r\n    }, [initializeBoard]);\r\n\r\n    // Effect to check for match end conditions.\r\n    useEffect(() => {\r\n        if (isPlaying) {\r\n            // If either player reaches half the match format score (rounded up), the match ends.\r\n            if (playerScore >= Math.ceil(matchFormat / 2)) {\r\n                endMatch(true); // Current player won the match.\r\n            } else if (opponentScore >= Math.ceil(matchFormat / 2)) {\r\n                endMatch(false); // Opponent won the match.\r\n            }\r\n        }\r\n    }, [playerScore, opponentScore, isPlaying, matchFormat, endMatch]);\r\n\r\n\r\n    // Effect to manage `mustReenterFromBar` state and highlight valid bar entry moves.\r\n    useEffect(() => {\r\n        if (isPlaying && boardState.bar[currentPlayer] > 0) {\r\n            setMustReenterFromBar(true);\r\n            setGameMessage(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} must re-enter checkers from the bar! Click on an available highlighted point to place your checker.`);\r\n            if (availableDice.length > 0) {\r\n                // Calculate possible entry moves based on current dice and board state\r\n                const availableEntryMoves = calculatePossibleMoves('bar', availableDice, currentPlayer, boardState);\r\n                setPossibleMovesInfo(availableEntryMoves);\r\n            }\r\n        } else {\r\n            setMustReenterFromBar(false);\r\n            // Clear highlights if no bar checkers and no checker is currently selected.\r\n            if(selectedPoint === null && possibleMovesInfo.length > 0) {\r\n                setPossibleMovesInfo([]);\r\n            }\r\n        }\r\n    }, [boardState.bar, currentPlayer, isPlaying, availableDice, selectedPoint, calculatePossibleMoves, boardState, possibleMovesInfo.length]);\r\n\r\n\r\n    // Effect to update possible moves when selected point, available dice, or player changes.\r\n    useEffect(() => {\r\n        if (selectedPoint !== null && availableDice.length > 0) {\r\n            const moves = calculatePossibleMoves(selectedPoint, availableDice, currentPlayer, boardState);\r\n            // Only update if the moves array is different to prevent unnecessary renders\r\n            if (JSON.stringify(moves) !== JSON.stringify(possibleMovesInfo)) {\r\n                setPossibleMovesInfo(moves);\r\n            }\r\n        } else if (selectedPoint === null && possibleMovesInfo.length > 0 && !mustReenterFromBar) {\r\n            // Clear possible moves when nothing is selected, unless re-entering from bar\r\n            setPossibleMovesInfo([]);\r\n        }\r\n    }, [selectedPoint, availableDice, currentPlayer, boardState, calculatePossibleMoves, possibleMovesInfo, mustReenterFromBar]);\r\n\r\n\r\n    // Handles a click on a board point.\r\n    const handlePointClick = (pointNumber) => {\r\n        if (!isPlaying || availableDice.length === 0) {\r\n            setGameMessage(\"Please roll the dice and ensure moves are available!\");\r\n            return;\r\n        }\r\n\r\n        // If the clicked point is already selected, deselect it.\r\n        if (selectedPoint === pointNumber) {\r\n            setSelectedPoint(null);\r\n            setPossibleMovesInfo([]); // Clear possible moves info\r\n            setGameMessage(\"Checker deselected.\");\r\n            return;\r\n        }\r\n\r\n        // Handle clicks on bear-off areas as target points\r\n        const isClickOnBearOffArea = (pointNumber === 0 || pointNumber === 25);\r\n        const targetMoveInfo = possibleMovesInfo.find(move => move.targetPoint === pointNumber);\r\n\r\n        if (mustReenterFromBar) {\r\n            // If checkers are on the bar, the only allowed action is to re-enter them.\r\n            if (isClickOnBearOffArea) { // Cannot bear off from bar\r\n                setGameMessage(\"You must re-enter checkers from the bar first.\");\r\n                return;\r\n            }\r\n            if (targetMoveInfo) {\r\n                performMove('bar', pointNumber, targetMoveInfo.diceUsed);\r\n            } else {\r\n                setGameMessage(\"You must re-enter checkers from the bar. Please click one of the highlighted points.\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        // If a checker is already selected, try to move it to the clicked point (including bear-off areas).\r\n        if (selectedPoint !== null && targetMoveInfo) {\r\n            performMove(selectedPoint, pointNumber, targetMoveInfo.diceUsed); // Pass the exact dice used\r\n        } else {\r\n            // No checker selected, or clicked an invalid target. Try to select a checker.\r\n            if (isClickOnBearOffArea) { // Cannot select a checker from a bear-off area\r\n                setGameMessage(\"You cannot select checkers from the bear-off area.\");\r\n                setSelectedPoint(null);\r\n                setPossibleMovesInfo([]);\r\n                return;\r\n            }\r\n\r\n            const pointCheckers = boardState.points[pointNumber - 1].checkers;\r\n            if (pointCheckers.length > 0 && pointCheckers[0] === currentPlayer) {\r\n                setSelectedPoint(pointNumber);\r\n                // When a checker is selected, calculate and store its possible moves including the dice used.\r\n                const calculatedMoves = calculatePossibleMoves(pointNumber, availableDice, currentPlayer, boardState);\r\n                setPossibleMovesInfo(calculatedMoves);\r\n                setGameMessage(`Selected checker from point ${pointNumber}. Now choose a destination.`);\r\n            } else {\r\n                setGameMessage(\"You don't have checkers on this point or it's not your turn. Please select your own checker.\");\r\n                setSelectedPoint(null); // Ensure no point is selected if invalid click.\r\n                setPossibleMovesInfo([]); // Clear possible moves info\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-white p-6 rounded-xl shadow-2xl max-w-5xl mx-auto my-8\">\r\n            <h2 className=\"text-3xl font-extrabold text-blue-800 mb-6 text-center\">Play Backgammon</h2>\r\n            <p className=\"text-lg text-gray-700 mb-4 text-center\">\r\n                Current User: <span className=\"font-semibold text-blue-600\">{currentUser?.displayName || 'Guest'}</span> (ID: <span className=\"font-mono text-xs break-words\">{userId || 'N/A'}</span>)\r\n            </p>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\r\n                <div className=\"p-4 bg-blue-50 rounded-lg shadow-inner col-span-1\">\r\n                    <h3 className=\"text-xl font-bold text-blue-700 mb-3\">Match Settings</h3>\r\n                    <label htmlFor=\"match-format\" className=\"block text-gray-700 font-medium mb-2\">\r\n                        Match Format (Best of N games):\r\n                    </label>\r\n                    <select\r\n                        id=\"match-format\"\r\n                        className=\"w-full p-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n                        value={matchFormat}\r\n                        onChange={(e) => setMatchFormat(parseInt(e.target.value))}\r\n                        disabled={isPlaying}\r\n                    >\r\n                        <option value={7}>Best of 7</option>\r\n                        <option value={9}>Best of 9</option>\r\n                        <option value={11}>Best of 11</option>\r\n                        <option value={13}>Best of 13</option>\r\n                        <option value={15}>Best of 15</option>\r\n                    </select>\r\n                    {/* Toggle sound button removed as sound functionality is removed */}\r\n                    {/* <div className=\"mt-4\">\r\n                        <button\r\n                            onClick={() => setSoundEnabled(prev => !prev)}\r\n                            className={`w-full py-2 px-4 rounded-md font-semibold transition-colors ${\r\n                                soundEnabled ? 'bg-indigo-600 hover:bg-indigo-700 text-white' : 'bg-gray-200 hover:bg-gray-300 text-gray-800'\r\n                            }`}\r\n                        >\r\n                            Toggle Dice Sound: {soundEnabled ? 'On' : 'Off'}\r\n                        </button>\r\n                    </div> */}\r\n                </div>\r\n\r\n                <div className=\"p-4 bg-green-50 rounded-lg shadow-inner flex flex-col justify-between col-span-2\">\r\n                    <div>\r\n                        <h3 className=\"text-xl font-bold text-green-700 mb-3\">Game Status</h3>\r\n                        <p className=\"text-gray-700 font-medium text-lg\">{gameMessage}</p>\r\n                    </div>\r\n                    <div className=\"mt-4 text-center\">\r\n                        <p className=\"text-2xl font-bold text-gray-800\">\r\n                            Score: {playerScore} - {opponentScore}\r\n                        </p>\r\n                        {isPlaying && availableDice.length > 0 && (\r\n                            <p className=\"text-md text-gray-600 mt-1\">Remaining Dice: {availableDice.join(', ')}</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Backgammon Board & Dice Area */}\r\n            <div className=\"flex flex-col md:flex-row gap-6 items-start\">\r\n                <div className=\"w-full md:w-3/4\">\r\n                    <BackgammonBoard\r\n                        board={boardState}\r\n                        currentPlayer={currentPlayer}\r\n                        onPointClick={handlePointClick}\r\n                        selectedPoint={selectedPoint}\r\n                        possibleMovePoints={possibleMovesInfo.map(m => m.targetPoint)} // Pass only the points for highlighting\r\n                        currentDiceValues={dice}\r\n                    />\r\n                </div>\r\n                <div className=\"w-full md:w-1/4 flex flex-col gap-4\">\r\n                    {/* Removed soundEnabled prop from Dice component */}\r\n                    <Dice dice={dice} setDice={setDice} rollDice={rollDiceHandler} disabled={!isPlaying || availableDice.length > 0} />\r\n                    {isPlaying && (\r\n                        <div className=\"flex flex-col gap-2 p-4 bg-gray-50 rounded-lg shadow-inner\">\r\n                            <h4 className=\"text-md font-bold text-gray-700\">Turn Actions</h4>\r\n                            <button\r\n                                onClick={undoLastMove}\r\n                                disabled={moveHistory.length === 0 || !isPlaying}\r\n                                className=\"bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                            >\r\n                                Undo Last Move\r\n                            </button>\r\n                            {/* Manual win/lose buttons for simulating a *game outcome* within the match, useful for testing match score. */}\r\n                            <button\r\n                                onClick={() => {\r\n                                    setConfirmModalAction(() => () => { // Set the action to be performed on confirmation.\r\n                                        const newBoardState = JSON.parse(JSON.stringify(boardState));\r\n                                        newBoardState.home.white = 15; // Force White to win.\r\n                                        setBoardState(newBoardState);\r\n                                        endTurn(); // Trigger win logic and next game/match end.\r\n                                        setShowConfirmModal(false); // Close the confirmation modal.\r\n                                    });\r\n                                    setShowConfirmModal(true); // Show the confirmation modal.\r\n                                    setModalMessage(\"Are you sure you want to simulate White winning this game?\"); // Set confirmation message.\r\n                                }}\r\n                                className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors\"\r\n                            >\r\n                                Simulate White Win Game\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setConfirmModalAction(() => () => { // Set the action to be performed on confirmation.\r\n                                        const newBoardState = JSON.parse(JSON.stringify(boardState));\r\n                                        newBoardState.home.black = 15; // Force Black to win.\r\n                                        setBoardState(newBoardState);\r\n                                        endTurn(); // Trigger win logic and next game/match end.\r\n                                        setShowConfirmModal(false); // Close the confirmation modal.\r\n                                    });\r\n                                    setShowConfirmModal(true); // Show the confirmation modal.\r\n                                    setModalMessage(\"Are you sure you want to simulate Black winning this game?\"); // Set confirmation message.\r\n                                }}\r\n                                className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors\"\r\n                            >\r\n                                Simulate Black Win Game\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"flex flex-wrap justify-center gap-4 mt-8\">\r\n                {!isPlaying ? (\r\n                    <button\r\n                        onClick={startMatch}\r\n                        className=\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-purple-300\"\r\n                    >\r\n                        Start New Match\r\n                    </button>\r\n                ) : null}\r\n            </div>\r\n\r\n            {/* Modal for match end notifications */}\r\n            {showModal && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n                    <div className=\"bg-white rounded-lg p-8 shadow-2xl text-center max-w-sm w-full border-t-8 border-blue-600\">\r\n                        <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">Match Finished!</h3>\r\n                        <p className=\"text-lg text-gray-700 mb-6\">{modalMessage}</p>\r\n                        <button\r\n                            onClick={closeModal}\r\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-full shadow-md transition-all duration-300 transform hover:scale-105\"\r\n                        >\r\n                            OK\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Custom Confirmation Modal */}\r\n            {showConfirmModal && (\r\n                <ConfirmModal\r\n                    message={modalMessage} // Reusing modalMessage for confirmation message.\r\n                    onConfirm={confirmModalAction} // Execute the stored action on confirm.\r\n                    onCancel={() => setShowConfirmModal(false)} // Just close on cancel.\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// --- Other Shared Components ---\r\n\r\n// Header Component: Navigation and user info display.\r\nconst Header = ({ onNavigate }) => {\r\n    const { currentUser, logout } = useContext(AuthContext);\r\n\r\n    return (\r\n        <header className=\"bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-lg rounded-b-lg mb-6\">\r\n            <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center\">\r\n                <h1 className=\"text-3xl font-extrabold text-yellow-300 tracking-wide mb-3 sm:mb-0\">\r\n                    Backgammon Royale\r\n                </h1>\r\n                <nav className=\"flex flex-wrap justify-center sm:justify-end gap-3 sm:gap-4\">\r\n                    <button\r\n                        onClick={() => onNavigate('game')}\r\n                        className=\"px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-blue-900 font-semibold rounded-lg shadow-md transition-transform transform hover:scale-105 flex items-center gap-2\"\r\n                    >\r\n                        {/* Using text for icons as lucide-react is not available in this environment */}\r\n                        Game\r\n                    </button>\r\n                    <button\r\n                        onClick={() => onNavigate('stats')}\r\n                        className=\"px-4 py-2 bg-green-500 hover:bg-green-600 text-white font-semibold rounded-lg shadow-md transition-transform transform hover:scale-105 flex items-center gap-2\"\r\n                    >\r\n                        Rankings\r\n                    </button>\r\n                    {currentUser && !currentUser.isAnonymous && (\r\n                        <div className=\"flex items-center gap-2 bg-blue-500 px-4 py-2 rounded-lg shadow-md\">\r\n                            <img\r\n                                src={currentUser.photoURL || 'https://placehold.co/24x24/cccccc/000000?text=U'}\r\n                                alt=\"User Avatar\"\r\n                                className=\"w-6 h-6 rounded-full border border-yellow-300\"\r\n                            />\r\n                            <span className=\"font-medium text-sm hidden md:block\">{currentUser.displayName || 'Guest'}</span>\r\n                            <button\r\n                                onClick={logout}\r\n                                className=\"px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm font-semibold rounded-lg shadow-inner transition-colors\"\r\n                            >\r\n                                Logout\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\n// LoginPage Component: Handles user authentication.\r\nconst LoginPage = () => {\r\n    const { signInWithGoogle, loadingAuth } = useContext(AuthContext);\r\n\r\n    if (loadingAuth) {\r\n        return (\r\n            <div className=\"flex justify-center items-center h-screen bg-gray-100\">\r\n                <div className=\"text-xl font-semibold text-gray-700\">Loading authentication...</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 flex items-center justify-center p-4\">\r\n            <div className=\"bg-white p-8 rounded-xl shadow-2xl max-w-md w-full text-center border-t-4 border-blue-500\">\r\n                <h2 className=\"text-3xl font-extrabold text-gray-800 mb-6\">Welcome to Backgammon Royale</h2>\r\n                <p className=\"text-lg text-gray-600 mb-8\">\r\n                    Sign in to play games, track your stats, and see how you rank against other players!\r\n                </p>\r\n                <button\r\n                    onClick={signInWithGoogle}\r\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 flex items-center justify-center mx-auto\"\r\n                >\r\n                    {/* Using inline SVG for Google icon as a fallback */}\r\n                    <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                        <path d=\"M22.675 12.001c0-.78-.068-1.536-.182-2.272H12v4.265h6.398c-.282 1.39-1.048 2.583-2.227 3.376v2.774h3.565c2.08-1.922 3.284-4.743 3.284-8.143z\" fill=\"#4285F4\"/>\r\n                        <path d=\"M12 23c3.228 0 5.922-1.066 7.896-2.883l-3.565-2.774c-.98.667-2.245 1.054-3.561 1.054-2.766 0-5.1-1.868-5.952-4.382H2.42v2.851C4.305 20.258 7.964 23 12 23z\" fill=\"#34A853\"/>\r\n                        <path d=\"M5.952 14.265c-.25-1.05-.39-2.16-.39-3.265s.14-2.215.39-3.265V4.881H2.42C.876 7.234 0 9.567 0 12s.876 4.766 2.42 7.119L5.952 14.265z\" fill=\"#FBBC05\"/>\r\n                        <path d=\"M12 4.615c1.761 0 3.35.602 4.606 1.795l3.16-3.16c-1.85-1.74-4.26-2.83-7.766-2.83C7.964 0 4.305 2.742 2.42 7.119l3.532 2.774C6.9 6.483 9.234 4.615 12 4.615z\" fill=\"#EA4335\"/>\r\n                    </svg>\r\n                    Sign in with Google\r\n                </button>\r\n                <p className=\"text-sm text-gray-500 mt-6\">\r\n                    Your current user ID is: <span className=\"font-mono text-gray-700 break-words\">{auth?.currentUser?.uid || 'Not signed in'}</span>\r\n                </p>\r\n                <p className=\"mt-4 text-xs text-gray-500\">\r\n                    By signing in, you agree to our terms of service and privacy policy.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// StatsPage Component: Displays player rankings and statistics.\r\nconst StatsPage = () => {\r\n    const { currentUser, userId, loadingAuth } = useContext(AuthContext);\r\n    const [users, setUsers] = useState([]);\r\n    const [loadingStats, setLoadingStats] = useState(true);\r\n    const [sortBy, setSortBy] = useState('winLossRatio'); // Criteria for sorting.\r\n    const [sortOrder, setSortOrder] = useState('desc');   // Sorting order.\r\n    const [filterType, setFilterType] = useState('all'); // Filter for 'all' or 'mine' stats.\r\n\r\n    useEffect(() => {\r\n        // Only proceed if Firestore is initialized and authentication is loaded.\r\n        if (!db || loadingAuth) {\r\n            if (!db) console.warn(\"StatsPage: db is not initialized.\");\r\n            if (loadingAuth) console.log(\"StatsPage: Auth is still loading.\");\r\n            return;\r\n        }\r\n\r\n        setLoadingStats(true);\r\n        console.log(\"StatsPage: Attempting to fetch users from Firestore...\");\r\n        // Fetch users in real-time.\r\n        const unsubscribe = FirestoreService.getUsers((fetchedUsers) => {\r\n            console.log(\"StatsPage: Fetched users:\", fetchedUsers);\r\n            // Process fetched users to calculate win/loss ratio and total matches.\r\n            const processedUsers = fetchedUsers.map(user => {\r\n                const totalMatches = (user.totalMatchesWon || 0) + (user.totalMatchesLost || 0);\r\n                return {\r\n                    ...user,\r\n                    winLossRatio: totalMatches > 0 ? ((user.totalMatchesWon || 0) / totalMatches) : 0,\r\n                    totalMatches: totalMatches,\r\n                };\r\n            });\r\n            setUsers(processedUsers);\r\n            setLoadingStats(false); // Stats loading complete.\r\n            console.log(\"StatsPage: Users state updated, loadingStats set to false.\");\r\n        });\r\n\r\n        // Cleanup function: unsubscribe from Firestore listener.\r\n        return () => {\r\n            console.log(\"StatsPage: Cleaning up Firestore listener.\");\r\n            unsubscribe();\r\n        };\r\n    }, [db, loadingAuth]); // Re-run effect when db or loadingAuth changes.\r\n\r\n    // Filter and sort users based on current criteria.\r\n    const sortedAndFilteredUsers = [...users]\r\n        .filter(user => {\r\n            if (filterType === 'mine' && userId) {\r\n                return user.id === userId; // Only show current user's stats.\r\n            }\r\n            return true; // Show all users.\r\n        })\r\n        .sort((a, b) => {\r\n            let valA, valB;\r\n            // Assign values based on sorting criteria.\r\n            if (sortBy === 'winLossRatio') {\r\n                valA = a.winLossRatio;\r\n                valB = b.winLossRatio;\r\n            } else if (sortBy === 'totalMatchesWon') {\r\n                valA = a.totalMatchesWon || 0;\r\n                valB = b.totalMatchesWon || 0;\r\n            } else if (sortBy === 'totalGamesWon') {\r\n                valA = a.totalGamesWon || 0;\r\n                valB = b.totalGamesWon || 0;\r\n            } else if (sortBy === 'totalMatches') {\r\n                valA = a.totalMatches || 0;\r\n                valB = b.totalMatches || 0;\r\n            } else { // Default to totalGamesPlayed\r\n                valA = a.totalGamesPlayed || 0;\r\n                valB = b.totalGamesPlayed || 0;\r\n            }\r\n\r\n            // Apply sorting order.\r\n            if (sortOrder === 'asc') {\r\n                return valA - valB;\r\n            } else {\r\n                return valB - valA; // Corrected the sorting logic to use valA and valB consistently\r\n            }\r\n        });\r\n\r\n    if (loadingAuth || loadingStats) {\r\n        return <div className=\"text-center py-8\">Loading rankings...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-white p-6 rounded-xl shadow-2xl max-w-6xl mx-auto my-8\">\r\n            <h2 className=\"text-3xl font-extrabold text-green-800 mb-6 text-center\">Player Rankings</h2>\r\n\r\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6 p-4 bg-gray-50 rounded-lg shadow-inner justify-between items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                    <label htmlFor=\"filter\" className=\"font-semibold text-gray-700\">Filter:</label>\r\n                    <select\r\n                        id=\"filter\"\r\n                        className=\"p-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n                        value={filterType}\r\n                        onChange={(e) => setFilterType(e.target.value)}\r\n                    >\r\n                        <option value=\"all\">All Players</option>\r\n                        {currentUser && !currentUser.isAnonymous && <option value=\"mine\">My Stats</option>}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2 mt-4 md:mt-0\">\r\n                    <label htmlFor=\"sortBy\" className=\"font-semibold text-gray-700\">Sort By:</label>\r\n                    <select\r\n                        id=\"sortBy\"\r\n                        className=\"p-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n                        value={sortBy}\r\n                        onChange={(e) => setSortBy(e.target.value)}\r\n                    >\r\n                        <option value=\"winLossRatio\">Win/Loss Ratio</option>\r\n                        <option value=\"totalMatchesWon\">Total Matches Won</option>\r\n                        <option value=\"totalGamesWon\">Total Games Won</option>\r\n                        <option value=\"totalGamesPlayed\">Total Games Played (within matches)</option>\r\n                        <option value=\"totalMatches\">Total Matches Played</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2 mt-4 md:mt-0\">\r\n                    <button\r\n                        onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\r\n                        className=\"p-2 bg-gray-200 hover:bg-gray-300 rounded-lg shadow-sm transition-colors flex items-center gap-1\"\r\n                    >\r\n                        {sortOrder === 'asc' ? (\r\n                            <span>&#8593; Ascending</span>\r\n                        ) : (\r\n                            <span>&#8595; Descending</span>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"overflow-x-auto rounded-lg shadow-md border border-gray-200\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                    <thead className=\"bg-blue-100\">\r\n                        <tr>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Rank</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Player</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">User ID</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Matches Won</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Matches Lost</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Win/Loss Ratio</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Games Won</th>\r\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Games Lost</th>\r\n                            <th className=\"px-4 py-3 whitespace-nowrap text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Total Games Played</th>\r\n                            <th className=\"px-4 py-3 whitespace-nowrap text-left text-xs font-medium text-blue-700 uppercase tracking-wider\">Total Matches Played</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                        {sortedAndFilteredUsers.length === 0 ? (\r\n                            <tr>\r\n                                <td colSpan=\"10\" className=\"px-4 py-4 text-center text-gray-500\">\r\n                                    No players found or no data available. Play some matches!\r\n                                </td>\r\n                            </tr>\r\n                        ) : (\r\n                            sortedAndFilteredUsers.map((user, index) => (\r\n                                <tr key={user.id} className={`${user.id === userId ? 'bg-yellow-50 font-bold' : 'hover:bg-gray-50'}`}>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">{index + 1}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-blue-800 flex items-center gap-2\">\r\n                                        <img\r\n                                            src={user.photoURL || 'https://placehold.co/24x24/cccccc/000000?text=U'}\r\n                                            alt=\"Avatar\"\r\n                                            className=\"w-6 h-6 rounded-full border border-gray-300\"\r\n                                        />\r\n                                        {user.displayName}\r\n                                    </td>\r\n                                    <td className=\"px-4 py-3 text-sm text-gray-700 font-mono text-xs break-words\">{user.id}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.totalMatchesWon || 0}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.totalMatchesLost || 0}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.winLossRatio.toFixed(3)}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.totalGamesWon || 0}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.totalGamesLost || 0}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.totalGamesPlayed || 0}</td>\r\n                                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-700\">{user.totalMatches || 0}</td>\r\n                                </tr>\r\n                            ))\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <p className=\"mt-6 text-sm text-gray-500 text-center\">\r\n                Note: \"Total Games Played\" refers to individual games within a best-of-N match.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\n// --- Main App Component ---\r\n// This component handles routing and overall application layout.\r\nconst App = () => {\r\n    const [currentPage, setCurrentPage] = useState('game'); // State to control which page is displayed.\r\n    const { currentUser, loadingAuth } = useContext(AuthContext); // Access authentication state from context.\r\n\r\n    console.log(\"App component rendering. CurrentPage:\", currentPage, \"LoadingAuth:\", loadingAuth, \"CurrentUser:\", currentUser?.uid);\r\n\r\n    // Display a loading indicator while authentication state is being determined.\r\n    if (loadingAuth) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-100 font-inter antialiased flex items-center justify-center\">\r\n                <div className=\"text-xl font-semibold text-gray-700\">Loading application...</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-100 font-inter antialiased\">\r\n            <Header onNavigate={setCurrentPage} /> {/* Header for navigation. */}\r\n            <main className=\"container mx-auto p-4\">\r\n                {/* Conditional rendering: show LoginPage if not authenticated, otherwise show game or stats. */}\r\n                {!currentUser || currentUser.isAnonymous ? (\r\n                    <LoginPage />\r\n                ) : (\r\n                    <>\r\n                        {currentPage === 'game' && <BackgammonGame onMatchEnd={() => setCurrentPage('stats')} />}\r\n                        {currentPage === 'stats' && <StatsPage />}\r\n                    </>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\n// The top-level component that wraps the entire application with AuthProvider.\r\n// This is crucial for useContext(AuthContext) to work throughout the app.\r\nconst RootApp = () => (\r\n    <AuthProvider>\r\n        <App />\r\n    </AuthProvider>\r\n);\r\n\r\nexport default RootApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}